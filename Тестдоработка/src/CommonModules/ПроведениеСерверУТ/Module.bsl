
#Область ПрограммныйИнтерфейс

#Область ПодготовкаИЗаписьДвиженийДокумента

// Процедура инициализирует общие структуры, используемые при проведении документов.
//  Вызывается из модуля документов при проведении.
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка - ссылка на документ
//  ДополнительныеСвойства	 - Структура - дополнительные свойства документа-объекта
//  РежимПроведения			 - РежимПроведенияДокумента - режим проведения.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
КонецПроцедуры

// Выполняет закрытие менеджера временных таблиц в структуре дополнительных свойств документа, используемых 
// при проведении.
//
// Параметры:
//	ДополнительныеСвойства - Структура - структура с дополнительными свойствами документа, используемыми
//		при проведении.
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Формирует массив имен регистров, по которым документ имеет движения.
//  Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//  Регистратор					 - ДокументСсылка	 - ссылка на документ, для которого формируется список регистров
//  Движения					 - КоллекцияДвижений - движения документа
//  МассивИсключаемыхРегистров	 - Массив			 - исключаемые регистры.
// 
// Возвращаемое значение:
//  Массив - массив имен регистров, по которым документ имеет движения.
//
Функция ПолучитьИспользуемыеРегистры(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет подготовку наборов записей документа к записи движений.
//  1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
//  2. Взводит флаг записи у наборов, по которым документ имеет движения
//  Вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - наборы записей которого нудно подготовить
//  ЭтоНовый - Булево - признак нового документа
//  ДвиженияМетаданные - свойство метаданных Движения.
//  ОтключитьПроверкуДатыЗапретаИзменения - Булево.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь, ДвиженияМетаданные = НеОпределено, ОтключитьПроверкуДатыЗапретаИзменения = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить("ГрафикПоступленияТоваров");
		//++ НЕ УТ 
		ИсключаемыеРегистры.Добавить("ГрафикЭтаповПроизводства");
		//-- НЕ УТ 
		Если Не Объект.ДополнительныеСвойства.Свойство("ЗаписыватьРезервыТоваровОрганизацийВместеСоВсеми")
			Или Не Объект.ДополнительныеСвойства.ЗаписыватьРезервыТоваровОрганизацийВместеСоВсеми Тогда
			ИсключаемыеРегистры.Добавить("РезервыТоваровОрганизаций");
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(Объект.Ссылка);
		
		
		// Регистры, движения по которым формируются не из модуля менеджера документа,
		// но должны удаляться при отмене проведения документа.
		Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		 И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Если ТипДокумента <> Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
				ИсключаемыеРегистры.Добавить("РасчетыСКлиентамиПоДокументам");
				ИсключаемыеРегистры.Добавить("РасчетыСПоставщикамиПоДокументам");
			КонецЕсли;
			//++ НЕ УТ
			ИсключаемыеРегистры.Добавить("Хозрасчетный");
			ИсключаемыеРегистры.Добавить("ОтражениеДокументовВРеглУчете");
			ИсключаемыеРегистры.Добавить("ПланыВыпускаИзделий");
			ИсключаемыеРегистры.Добавить("ПланыПотребленияМатериалов");
			ИсключаемыеРегистры.Добавить("ПланыЗанятостиТрудовыхРесурсов");
			//-- НЕ УТ
			Если
			 ТипДокумента <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			 И ТипДокумента <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
			 И ТипДокумента <> Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
			 И ТипДокумента <> Тип("ДокументСсылка.ЗаписьКнигиПокупок")
			 И ТипДокумента <> Тип("ДокументСсылка.ЗаписьКнигиПродаж")
			 И ТипДокумента <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			 И ТипДокумента <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			 И ТипДокумента <> Тип("ДокументСсылка.КорректировкаРеализации")
			 //++ НЕ УТ
			 И ТипДокумента <> Тип("ДокументСсылка.ПередачаМатериаловВПроизводство")
			 И ТипДокумента <> Тип("ДокументСсылка.ВыпускПродукции")
			 И ТипДокумента <> Тип("ДокументСсылка.ОтчетОператораСистемыПлатон")
			 И ТипДокумента <> Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")
			 //-- НЕ УТ
			 И ТипДокумента <> Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
			 
				ИсключаемыеРегистры.Добавить("ПартииПроизводственныхЗатрат");
				//++ НЕ УТ
				ИсключаемыеРегистры.Добавить("ПартииНезавершенногоПроизводства");
				//-- НЕ УТ
				ИсключаемыеРегистры.Добавить("ПартииТоваровОрганизаций");
				ИсключаемыеРегистры.Добавить("ПартииТоваровПереданныеНаКомиссию");
				ИсключаемыеРегистры.Добавить("ПартииРасходовНаСебестоимостьТоваров");
				ИсключаемыеРегистры.Добавить("ПартииЗатратНаВыпуск");
				ИсключаемыеРегистры.Добавить("НДСЗаписиКнигиПокупок");
				ИсключаемыеРегистры.Добавить("НДСЗаписиКнигиПродаж");
			КонецЕсли;
			
			//++ НЕ УТ
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратОСОтАрендатора2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ИзменениеПараметровОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.МодернизацияОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПередачаОСАрендатору2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПеремещениеОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПереоценкаОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.РазукомплектацияОС")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеОС2_4") Тогда
				
				ИсключаемыеРегистры.Добавить("ПараметрыАмортизацииОСБухгалтерскийУчет");
				ИсключаемыеРегистры.Добавить("ПараметрыАмортизацииОСНалоговыйУчет");
				ИсключаемыеРегистры.Добавить("НачислениеАмортизацииОСБухгалтерскийУчет");
				ИсключаемыеРегистры.Добавить("НачислениеАмортизацииОСНалоговыйУчет");
				ИсключаемыеРегистры.Добавить("СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет");
				ИсключаемыеРегистры.Добавить("МестонахождениеОСБухгалтерскийУчет");
			КонецЕсли;
			
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратОСОтАрендатора2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПередачаОСАрендатору2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.РазукомплектацияОС")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеОС2_4") Тогда
				
				ИсключаемыеРегистры.Добавить("СостоянияОСОрганизаций");
			КонецЕсли;
			
			//-- НЕ УТ
			
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьИспользуемыеРегистры(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;
	
	Если ОтключитьПроверкуДатыЗапретаИзменения Тогда
		ОтключитьПроверкуДатыЗапретаИзменения(Объект.Движения, ОтключитьПроверкуДатыЗапретаИзменения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьНаборыЗаписейКУдалениюПроведения(Объект, ОтключитьПроверкуДатыЗапретаИзменения = Ложь) Экспорт
	
	Если ОтключитьПроверкуДатыЗапретаИзменения Тогда
		ОтключитьПроверкуДатыЗапретаИзменения(Объект.Движения, ОтключитьПроверкуДатыЗапретаИзменения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеСвойстваНабораПоДокументу(ДокументОбъект, НаборЗаписей, ПартионныйУчетВключен = Неопределено) Экспорт
	
	Если ПартионныйУчетВключен = Неопределено Тогда
		//ПартионныйУчетВключен = РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ДокументОбъект.Дата));
	КонецЕсли;	
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", ДокументОбъект.ДополнительныеСвойства.ЭтоНовый);
	НаборЗаписей.ДополнительныеСвойства.Вставить("РежимЗаписи", ДокументОбъект.ДополнительныеСвойства.РежимЗаписи);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДатаРегистратора", ДокументОбъект.Дата);
	НаборЗаписей.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
		Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчетВключен",
		// Структура для передачи данных в модули наборов записей.
		ДокументОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы,
		ПартионныйУчетВключен));
	
КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
//  в модули наборов записей для выполнения регистрации изменений в движениях.
//  Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - объект, для которого нужно записать движения.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля, РассчитыватьИзменения, ПараметрыКонтроля;
	
	// Заполним общие дополнительные свойства всех движений
	//ПартионныйУчетВключен = РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(Объект.Дата));
	ПартионныйУчетВключен = Ложь;
	
	Для Каждого Движение Из Объект.Движения Цикл
		
		ЗаполнитьДополнительныеСвойстваНабораПоДокументу(Объект, Движение, ПартионныйУчетВключен);
		
		РегистрыНакопления.СебестоимостьТоваров.ИнициализироватьСохранениеДвиженийНабораЗаписейЗаПериод(
			Движение,
			Объект.ДополнительныеСвойства);
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		
		// Установка флага регистрации изменений в наборе записей.
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
			РассчитыватьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				
				// Необходимость контроля обеспечения устанавливается при выполнении рекомендаций в "Состояние обеспечения заказов".
				КонтролироватьОбеспечение = Неопределено;
				Если Объект.ДополнительныеСвойства.Свойство("КонтролироватьОбеспечение", КонтролироватьОбеспечение) Тогда
					НаборЗаписей.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", КонтролироватьОбеспечение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	// Для отработки случаев, когда документ перестает делать движения по регистру (при изменении вида операции). Очистим
	// оффлайновые регистры.
	ЕстьРасчетыСКлиентами = Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено;
	ЕстьРасчетыСПоставщиками = Объект.Движения.Найти("РасчетыСПоставщиками") <> Неопределено;
	Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Если ЕстьРасчетыСКлиентами Тогда
			
			СтатусОплачивается = Неопределено;
			
			Если Объект.Движения.РасчетыСКлиентами.Записывать
					И (Объект.Движения.РасчетыСКлиентами.Количество() = 0
					ИЛИ (Объект.ДополнительныеСвойства.Свойство("СтатусОплачивается", СтатусОплачивается) И СтатусОплачивается)) Тогда
				Объект.Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;

		Если ЕстьРасчетыСПоставщиками Тогда

			СтатусОплачивается = Неопределено;
			
			Если Объект.Движения.РасчетыСПоставщиками.Записывать
					И (Объект.Движения.РасчетыСПоставщиками.Количество() = 0
					ИЛИ (Объект.ДополнительныеСвойства.Свойство("СтатусОплачивается", СтатусОплачивается) И СтатусОплачивается)) Тогда
				Объект.Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;
		
		Если Объект.Движения.Найти("МатериалыИРаботыВПроизводстве") <> Неопределено И Объект.Движения.Найти("ПартииПроизводственныхЗатрат") <> Неопределено Тогда
			Если Объект.Движения.МатериалыИРаботыВПроизводстве.Количество() = 0 И Объект.Движения.МатериалыИРаботыВПроизводстве.Записывать Тогда
				Объект.Движения.ПартииПроизводственныхЗатрат.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
	ДвиженияТоварыОрганизаций = Объект.Движения.Найти("ТоварыОрганизаций");
	ДвиженияПартииТоваровОрганизаций = Объект.Движения.Найти("ПартииТоваровОрганизаций");
	ДвиженияРасчетыСКлиентамиПоДокументам = Объект.Движения.Найти("РасчетыСКлиентамиПоДокументам");
	
	Если ДвиженияТоварыОрганизаций <> Неопределено
		И ДвиженияТоварыОрганизаций.Количество() = 0
		И ДвиженияТоварыОрганизаций.Записывать Тогда
		
		Если ДвиженияПартииТоваровОрганизаций <> Неопределено Тогда
			ДвиженияПартииТоваровОрганизаций.Записывать = Истина;
		КонецЕсли;

		Если ДвиженияРасчетыСКлиентамиПоДокументам <> Неопределено Тогда
			ДвиженияРасчетыСКлиентамиПоДокументам.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Движения.Найти("ТоварыОрганизаций") <> Неопределено Тогда
		Объект.Движения.ТоварыОрганизаций.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
		Объект.Движения.РезервыТоваровОрганизаций.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
	КонецЕсли;
	
	Объект.Движения.Записать();
	
	ЕстьДвиженияПрочиеАктивыПассивы = Объект.Движения.Найти("ПрочиеАктивыПассивы") <> Неопределено;
	ФормироватьУправленческийБаланс = Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ЕстьДвиженияПрочиеАктивыПассивы И ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс")
		И ТипЗнч(Объект) <> Тип("ДокументОбъект.РасчетСебестоимостиТоваров");
	Если ФормироватьУправленческийБаланс Тогда
		//УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(Объект.Ссылка, Объект.Движения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура переписывает строки таблицы в указанные движения документа
//
// Параметры:
//	Таблица  - ТаблицаЗначений   - Таблица, строки которой должны быть помещены в движения документа,
//	Движения - КоллекцияДвижений - Элемент коллекции движений документа, набор записей регистра,
//	Отказ    - Булево            - Признак отказа выполнения транзакции.
//
Процедура ОтразитьДвижения(Таблица, Движения, Отказ) Экспорт
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Записывать = Истина;
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// Загружает ТаблицыДляДвижений в наборы записей регистров движений документа.
//
// Параметры:
//	ДополнительныеСвойства - Структура - структура с дополнительными свойствами документа, используемыми при проведении.
//		в структуре обязательно должен быть ключ "ТаблицыДляДвижений" содержащий массив таблиц значений 
//		предназначенные для загрузки в наборы записей;
//	Движения - КоллекцияДвижений - коллекция движений документа.
//
Процедура ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения) Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ТаблицыДляДвижений") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	Для Каждого Таблица Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = Таблица.Ключ;
		Если ВРег(Лев(ИмяРегистра,7))= "ТАБЛИЦА" Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра)-7);
		КонецЕсли;
		
		//++ НЕ УТ
		Если ИмяРегистра = "ОтражениеДокументовВРеглУчете" Тогда
			// Формирование движений выполняется процедурой РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению().
			Продолжить;
		КонецЕсли;
		//-- НЕ УТ
		
		Если Таблица.Значение.Количество() > 0 И Движения.Найти(ИмяРегистра) <> Неопределено Тогда
			Движения[ИмяРегистра].Записывать = Истина;
			Движения[ИмяРегистра].Загрузить(Таблица.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает и записывает пустые движения по указанным регистрам
//
// Параметры:
// 		Движения - КоллекцияДвижений - Коллекция наборов записей регистров документа
// 		Регистры - Строка - Строка с именами регистров для очистки, перечисленными через запятую.
//
Процедура ОчиститьЗаписатьДвижения(Движения, Регистры) Экспорт
	
	СтруктураРегистров = Новый Структура(Регистры);
	Для Каждого КлючИЗначение Из СтруктураРегистров Цикл
		Движения[КлючИЗначение.Ключ].Очистить();
		Движения[КлючИЗначение.Ключ].Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы.
//
// Параметры:
//  Запрос					 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса			 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  Таблицы					 - Структура		 - структура в которую будут помещены полученные таблицы для движений.
//  ДобавитьРазделитель		 - Булево			 - Истина, если нужно добавить разделитель ";" между запросами.
//  ДобавлятьСловоТаблица	 - Булево			 - Истина, если к имени таблицы движений нужно в начало добавить слово "Таблица".
//  ТолькоОтмеченные		 - Булево			 - признак пропуска инициализации таблицы движения.
//
Процедура ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные = Ложь) Экспорт
	
	ТаблицыЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда
		
			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Проверяет наличие текста запроса для формирования указанной таблицы
//
// Параметры:
//  ИмяТаблицы		 - Строка		 - имя таблицы
//  ТекстыЗапроса	 - СписокЗначений	 - список значений, значениями которого являются блоки запроса,
//  	синонимами - имена таблиц в которые необходимо поместить
//  	результат выполнения каждого отдельного блока запроса.
// 
// Возвращаемое значение:
//  Булево - Истина, если текст запроса есть.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт

	Если ТекстыЗапроса = Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА.
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу.
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

// Процедура формирует текст исключения и вызывает исключение
//  используется для прерывания проведения в документах для которых запрещено выборочное проведение по регистрам.
//
// Параметры:
//  ЗапретныйДокумент	 - ДокументСсылка, ДокументОбъект	 - документ для которого необходимо сформировать и вызвать исключения.
//
Процедура ЗапретВыборочногоПроведенияПоРегистрам(ЗапретныйДокумент) Экспорт
	
	ТекстИсключения = СтрШаблон(НСтр("ru = 'Для документа ""%1"" запрещено выборочное проведение по регистрам.'"),
								ЗапретныйДокумент.Метаданные().Синоним);
	ВызватьИсключение ТекстИсключения;
	
КонецПроцедуры

// Процедура формирует движения по регистрам заданий,
// которые используются при актуализации расчетов, если в 
// доп.свойствах объекта содержится временная таблица, соответствующая
// регистру заданий.
//
// Параметры:
//  Объект	 - ДокументОбъект - документ для которого формируются записи.
//
Процедура СформироватьЗаписиРегистровЗаданий(Объект) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("СверткаИБ") И Объект.ДополнительныеСвойства.СверткаИБ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ЕстьРасчетыСКлиентами = Ложь;
	ЕстьРасчетыСПоставщиками = Ложь;
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И Константы.АктуализироватьВзаиморасчетыПриПроведенииДокументов.Получить() Тогда
		Если (МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиИзменения") <> Неопределено
			ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено) Тогда
			ЕстьРасчетыСКлиентами = Истина;
		КонецЕсли;
		Если (МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиИзменения") <> Неопределено
			ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено) Тогда
			ЕстьРасчетыСПоставщиками = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаИЗаписьПодчиненныхДанныхПослеПроведенияДокумента

// Проверяет наличие дополнительного свойства, отвечающего за параметры записи подчиненных данных, осуществляемой
//  после записи документа и его движений.
//
// Параметры:
//  ДополнительныеСвойства	 - Структура - дополнительные свойства регистра
//  ТипПодчиненныхДанных	 - Строка	 - описание типа подчиненных данных.
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется записать.
//
Функция ЗаписыватьПодчиненныеДанные(ДополнительныеСвойства, ТипПодчиненныхДанных) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипПодчиненныхДанных = "СостоянияЗаказов" Тогда
		Возврат ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных.Свойство("СтруктураДляРасчетаСостояний");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Добавляет в структуру дополнительных свойств регистра накопления параметры записи подчиненных данных, осуществляемой
//  после записи документа и его движений.
//
// Параметры:
//  ДополнительныеСвойства	 - Структура - дополнительные свойства регистра
//  ТипПодчиненныхДанных	 - Строка - описание типа подчиненных данных.
//
Процедура ДобавитьСтруктуруЗаписиПодчиненныхДанных(ДополнительныеСвойства, ТипПодчиненныхДанных) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
		ДополнительныеСвойства.Вставить("ДляЗаписиПодчиненныхДанных", Новый Структура());
	КонецЕсли;
		
	Если ТипПодчиненныхДанных = "СостоянияЗаказов" Тогда
		
		СтруктураДляРасчетаСостояний = Новый Структура("МассивЗаказов", Новый Массив());
		ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных.Вставить("СтруктураДляРасчетаСостояний", СтруктураДляРасчетаСостояний);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в структуру дополнительных свойств объекта параметры записи подчиненных данных, осуществляемой
//  после записи документа и его движений.
//
// Параметры:
//  ДополнительныеСвойства	 - Структура - дополнительные свойства объекта.
//  Ссылка					 - ДокументСсылка - ссылка на заказ.
//
Процедура ДобавитьЗаказДляРасчетаСостояний(ДополнительныеСвойства, Ссылка) Экспорт
	
	СтруктураДляРасчетаСостояний = Новый Структура("МассивЗаказов", Новый Массив());
	СтруктураДляРасчетаСостояний.МассивЗаказов.Добавить(Ссылка);
	ДополнительныеСвойства.Вставить("ДляЗаписиПодчиненныхДанных", Новый Структура("СтруктураДляРасчетаСостояний", СтруктураДляРасчетаСостояний));
	
КонецПроцедуры

// Осуществляет запись подчиненных данных после записи документа и его движений.
//
// Параметры:
//  Объект	 - ДокументОбъект	 - документ для контроля
//  Отказ	 - булево			 - признак отказа от записи.
//
Процедура ЗаписатьПодчиненныеНаборамЗаписейДанные(Объект, Отказ) Экспорт
	
	МассивЗаказов = Новый Массив();
	Для Каждого Набор Из Объект.Движения Цикл
		
		Если Не Набор.ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСвойств = Набор.ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных;
		
		Если СтруктураСвойств.Свойство("СтруктураДляРасчетаСостояний") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗаказов, СтруктураСвойств.СтруктураДляРасчетаСостояний.МассивЗаказов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
		
		СтруктураСвойств = Объект.ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных;
		Если СтруктураСвойств.Свойство("СтруктураДляРасчетаСостояний") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗаказов, СтруктураСвойств.СтруктураДляРасчетаСостояний.МассивЗаказов);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.СостоянияВнутреннихЗаказов.ОтразитьСостояниеЗаказа(МассивЗаказов, Отказ);
	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыКонтроляДвиженийДокументовПоРегистрам

// Процедура выполняет контроль результатов проведения.
//  Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - документ для контроля
//  Отказ	 - булево - признак отказа от записи.
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда 
		Возврат;
	КонецЕсли;
	
	ЕстьРегистрыСКонтролемИзменений = Ложь;
	
	Если Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() > 0 Тогда
		ЕстьРегистрыСКонтролемИзменений = Истина;
	Иначе
		Для Каждого ДвигаемыйРегистр Из Объект.Движения Цикл
			Если ДвигаемыйРегистр.ДополнительныеСвойства.Свойство("РассчитыватьИзменения")
				И ДвигаемыйРегистр.ДополнительныеСвойства.РассчитыватьИзменения Тогда
					ЕстьРегистрыСКонтролемИзменений = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьРегистрыСКонтролемИзменений Тогда
		Возврат;
	КонецЕсли;
	          
	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	// Контроль отрицательных остатков по товарам
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение")
		Или ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияГрафикОтгрузкиТоваровИзменение") Тогда

		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаКонтрольОбеспечения(
			ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение"),
			ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияГрафикОтгрузкиТоваровИзменение"));

		МассивКонтролей.Добавить(Врег("ОбеспечениеВременнаяТаблица1"));
		МассивКонтролей.Добавить(Врег("ОбеспечениеВременнаяТаблица2"));
		МассивКонтролей.Добавить(Врег("Обеспечение"));

	КонецЕсли;

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтгрузкеИзменениеСводно") Тогда

		МассивКонтролей.Добавить(Врег("ДвиженияТоварыКОтгрузкеСводно"));

		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Остатки.Номенклатура      КАК Номенклатура,
		|	Остатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Остатки.Характеристика    КАК Характеристика,
		|	Остатки.Назначение    	  КАК Назначение,
		|	Остатки.Склад             КАК Склад,
		|	Остатки.Серия             КАК Серия,
		|	СУММА(Остатки.Количество) КАК Количество
		|
		|ИЗ 
		|(ВЫБРАТЬ
		|	Т.Номенклатура       КАК Номенклатура,
		|	Т.Характеристика     КАК Характеристика,
		|	Т.Назначение     	 КАК Назначение,
		|	Т.Склад              КАК Склад,
		|	Т.Серия              КАК Серия,
		|	-Т.ВРезервеОстаток - Т.КОтгрузкеОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение, Склад, Серия) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Назначение,
		|					Т.Склад,
		|					Т.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменениеСводно КАК Т)) КАК Т
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Номенклатура    КАК Номенклатура,
		|	Т.Характеристика  КАК Характеристика,
		|	Т.Назначение	  КАК Назначение,
		|	Т.Склад           КАК Склад,
		|	Т.Серия           КАК Серия,
		|	Т.ВНаличииОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение, Склад, Серия) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Назначение,
		|					Т.Склад,
		|					Т.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменениеСводно КАК Т)) КАК Т
		|) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Назначение,
		|	Остатки.Склад,
		|	Остатки.Серия
		|
		|ИМЕЮЩИЕ
		|	СУММА(Остатки.Количество) < 0	
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ОбеспечениеЗаказовИзменение") Тогда

		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			МассивКонтролей.Добавить(Врег("ОбеспечениеЗаказов"));
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	Таблица.Номенклатура                     КАК Номенклатура,
			|	Таблица.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
			|	Таблица.Характеристика                   КАК Характеристика,
			|	Таблица.Склад                            КАК Склад,
			|	Таблица.Назначение                       КАК Назначение,
			|
			|	Таблица.Заказать                         КАК Заказать,
			|	Таблица.Наличие                          КАК Наличие,
			|	Таблица.Потребность                      КАК Потребность,
			|
			|	Таблица.НаличиеИзменение                 КАК НаличиеИзменение,
			|	Таблица.ПотребностьИзменение             КАК ПотребностьИзменение,
			|	Таблица.ЗаказатьИзменение                КАК ЗаказатьИзменение,
			|
			|	Таблица.ОшибкаЗаказатьМеньшеНуля         КАК ОшибкаЗаказатьМеньшеНуля,
			|	Таблица.ВеличинаЗаказатьМеньшеНуля       КАК ВеличинаЗаказатьМеньшеНуля,
			|	Таблица.ОшибкаНаличиеВМинусе             КАК ОшибкаНаличиеВМинусе,
			|	Таблица.ОшибкаНаличиеБольшеПотребности   КАК ОшибкаНаличиеБольшеПотребности,
			|	Таблица.ВеличинаНаличиеБольшеПотребности КАК ВеличинаНаличиеБольшеПотребности
			|
			|ИЗ(
			|	ВЫБРАТЬ
			|		Остатки.Номенклатура                      КАК Номенклатура,
			|		Остатки.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
			|		Остатки.Характеристика                    КАК Характеристика,
			|		Остатки.Склад                             КАК Склад,
			|		Остатки.Назначение                        КАК Назначение,
			|		Остатки.Заказать                          КАК Заказать,

			|		Остатки.Наличие                           КАК Наличие,
			|		Остатки.Потребность                       КАК Потребность,
			|		// Ресурсы которые изменились
			|		ТаблицаИзменений.НаличиеИзменение         КАК НаличиеИзменение,
			|		ТаблицаИзменений.ПотребностьИзменение     КАК ПотребностьИзменение,
			|		ТаблицаИзменений.ЗаказатьИзменение        КАК ЗаказатьИзменение,
			|
			|		//Ошибка Заказать
			|		ВЫБОР КОГДА ТаблицаИзменений.ЗаказатьИзменение >0 И Остатки.Заказать < 0 ТОГДА
			|					ИСТИНА
			|				ИНАЧЕ
			|					ЛОЖЬ
			|			КОНЕЦ                                 КАК ОшибкаЗаказатьМеньшеНуля,
			|		Остатки.Заказать                          КАК ВеличинаЗаказатьМеньшеНуля,
			|
			|
			|		// Ошибка наличия товара под назначение
			|		ВЫБОР КОГДА ТаблицаИзменений.НаличиеИзменение >0 И Остатки.Наличие < 0 ТОГДА
			|					ИСТИНА
			|				ИНАЧЕ
			|					ЛОЖЬ
			|			КОНЕЦ                                 КАК ОшибкаНаличиеВМинусе,
			|
			|		// Ошибка наличия больше потребности
			|		ВЫБОР КОГДА (ТаблицаИзменений.НаличиеИзменение <0 ИЛИ ТаблицаИзменений.ПотребностьИзменение >0)
			|					И (Остатки.Наличие > Остатки.Потребность И Остатки.Заказать>=0) ТОГДА
			|					ИСТИНА
			|				ИНАЧЕ
			|					ЛОЖЬ
			|			КОНЕЦ                                 КАК ОшибкаНаличиеБольшеПотребности,
			|		Остатки.Наличие - Остатки.Потребность     КАК ВеличинаНаличиеБольшеПотребности
			|
			|	ИЗ(
			|		ВЫБРАТЬ
			|			Остатки.Номенклатура                   КАК Номенклатура,
			|			Остатки.Характеристика                 КАК Характеристика,
			|			Остатки.Склад                          КАК Склад,
			|			Остатки.Назначение                     КАК Назначение,
			|			Остатки.КЗаказуОстаток                 КАК Заказать,
			|			Остатки.НаличиеПодЗаказОстаток         КАК Наличие,
			|			Остатки.ПотребностьОстаток             КАК Потребность
			|		ИЗ
			|			РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|				(Номенклатура, Характеристика, Склад, Назначение) В(
			|					ВЫБРАТЬ
			|						Таблица.Номенклатура,
			|						Таблица.Характеристика,
			|						Таблица.Склад,
			|						Таблица.Назначение
			|					ИЗ
			|						ОбеспечениеЗаказовИзменение КАК Таблица)) КАК Остатки
			|
			|	) КАК Остатки
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеЗаказовИзменение КАК ТаблицаИзменений
			|	ПО
			|		Остатки.Номенклатура     = ТаблицаИзменений.Номенклатура
			|		И Остатки.Характеристика = ТаблицаИзменений.Характеристика
			|		И Остатки.Склад          = ТаблицаИзменений.Склад
			|		И Остатки.Назначение     = ТаблицаИзменений.Назначение
			|
			|) КАК Таблица
			|ГДЕ
			|	Таблица.ОшибкаЗаказатьМеньшеНуля = ИСТИНА
			|	ИЛИ Таблица.ОшибкаНаличиеВМинусе = ИСТИНА
			|	ИЛИ Таблица.ОшибкаНаличиеБольшеПотребности = ИСТИНА";
		
		Иначе
			Если НЕ ПакетЗапросов.Параметры.Свойство("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров") Тогда
				ПакетЗапросов.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
					Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
			КонецЕсли;
			
			Если НЕ ПакетЗапросов.Параметры.Свойство("МерныеТипыЕдиницИзмерений") Тогда
				ПакетЗапросов.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
					Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
			КонецЕсли;
			
			МассивКонтролей.Добавить(Врег("ДвиженияОбеспечениеЗаказовИзменениеМерныеТовары"));
			МассивКонтролей.Добавить(Врег("ВТДопустимыеОтклоненияОбеспечениеЗаказов"));
			МассивКонтролей.Добавить(Врег("ОбеспечениеЗаказов"));
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Таблица.Номенклатура,
			|	Таблица.Характеристика,
			|	Таблица.Склад,
			|	Таблица.Назначение
			|ПОМЕСТИТЬ ДвиженияОбеспечениеЗаказовИзменениеМерныеТовары
			|ИЗ
			|	ОбеспечениеЗаказовИзменение КАК Таблица
			|ГДЕ 
			|	Таблица.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|СГРУППИРОВАТЬ ПО
			|	Таблица.Номенклатура,
			|	Таблица.Характеристика,
			|	Таблица.Склад,
			|	Таблица.Назначение
			|ИНДЕКСИРОВАТЬ ПО
			|	Таблица.Номенклатура,
			|	Таблица.Характеристика,
			|	Таблица.Склад,
			|	Таблица.Назначение
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			// Допустимые отклонения
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ОбеспечениеЗаказов.Номенклатура   КАК Номенклатура,
			|	ОбеспечениеЗаказов.Характеристика КАК Характеристика,
			|	ОбеспечениеЗаказов.Склад          КАК Склад,
			|	ОбеспечениеЗаказов.Назначение     КАК Назначение,
			|	СУММА(ОбеспечениеЗаказов.Потребность
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ПОМЕСТИТЬ ВТДопустимыеОтклоненияОбеспечениеЗаказов
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ДвиженияОбеспечениеЗаказовИзменениеМерныеТовары КАК Изменения
			|		ПО ОбеспечениеЗаказов.Номенклатура      = Изменения.Номенклатура
			|			И ОбеспечениеЗаказов.Характеристика = Изменения.Характеристика
			|			И ОбеспечениеЗаказов.Склад          = Изменения.Склад
			|			И ОбеспечениеЗаказов.Назначение     = Изменения.Назначение
			|ГДЕ
			|	ОбеспечениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|СГРУППИРОВАТЬ ПО
			|	ОбеспечениеЗаказов.Номенклатура,
			|	ОбеспечениеЗаказов.Характеристика,
			|	ОбеспечениеЗаказов.Склад,
			|	ОбеспечениеЗаказов.Назначение
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад,
			|	Назначение
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	Таблица.Номенклатура                     КАК Номенклатура,
			|	Таблица.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
			|	Таблица.Характеристика                   КАК Характеристика,
			|	Таблица.Склад                            КАК Склад,
			|	Таблица.Назначение                       КАК Назначение,
			|
			|	Таблица.Заказать                         КАК Заказать,
			|	Таблица.Наличие                          КАК Наличие,
			|	Таблица.Потребность                      КАК Потребность,
			|
			|	Таблица.НаличиеИзменение                 КАК НаличиеИзменение,
			|	Таблица.ПотребностьИзменение             КАК ПотребностьИзменение,
			|	Таблица.ЗаказатьИзменение                КАК ЗаказатьИзменение,
			|
			|	Таблица.ОшибкаЗаказатьМеньшеНуля         КАК ОшибкаЗаказатьМеньшеНуля,
			|	Таблица.ВеличинаЗаказатьМеньшеНуля       КАК ВеличинаЗаказатьМеньшеНуля,
			|	Таблица.ОшибкаНаличиеВМинусе             КАК ОшибкаНаличиеВМинусе,
			|	Таблица.ОшибкаНаличиеБольшеПотребности   КАК ОшибкаНаличиеБольшеПотребности,
			|	Таблица.ВеличинаНаличиеБольшеПотребности КАК ВеличинаНаличиеБольшеПотребности
			|
			|ИЗ(
			|	ВЫБРАТЬ
			|		Остатки.Номенклатура                      КАК Номенклатура,
			|		Остатки.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
			|		Остатки.Характеристика                    КАК Характеристика,
			|		Остатки.Склад                             КАК Склад,
			|		Остатки.Назначение                        КАК Назначение,
			|		Остатки.Заказать                          КАК Заказать,

			|		Остатки.Наличие                           КАК Наличие,
			|		Остатки.Потребность                       КАК Потребность,
			|		// Ресурсы которые изменились
			|		ТаблицаИзменений.НаличиеИзменение         КАК НаличиеИзменение,
			|		ТаблицаИзменений.ПотребностьИзменение     КАК ПотребностьИзменение,
			|		ТаблицаИзменений.ЗаказатьИзменение        КАК ЗаказатьИзменение,
			|
			|		//Ошибка Заказать
			|		ВЫБОР КОГДА ТаблицаИзменений.ЗаказатьИзменение >0
			|			И (Остатки.Заказать + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0)) < 0 ТОГДА
			|					ИСТИНА
			|				ИНАЧЕ
			|					ЛОЖЬ
			|			КОНЕЦ                                 КАК ОшибкаЗаказатьМеньшеНуля,
			|		Остатки.Заказать                          КАК ВеличинаЗаказатьМеньшеНуля,
			|
			|
			|		// Ошибка наличия товара под назначение
			|		ВЫБОР КОГДА ТаблицаИзменений.НаличиеИзменение >0 
			|			И (Остатки.Наличие + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0)) < 0 ТОГДА
			|					ИСТИНА
			|				ИНАЧЕ
			|					ЛОЖЬ
			|			КОНЕЦ                                 КАК ОшибкаНаличиеВМинусе,
			|
			|		// Ошибка наличия больше потребности
			|		ВЫБОР КОГДА (ТаблицаИзменений.НаличиеИзменение <0 ИЛИ ТаблицаИзменений.ПотребностьИзменение >0)
			|					И (Остатки.Наличие > Остатки.Потребность + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0)
			|						И Остатки.Заказать>=0) ТОГДА
			|					ИСТИНА
			|				ИНАЧЕ
			|					ЛОЖЬ
			|			КОНЕЦ                                 КАК ОшибкаНаличиеБольшеПотребности,
			|		Остатки.Наличие - Остатки.Потребность     КАК ВеличинаНаличиеБольшеПотребности
			|
			|	ИЗ(
			|		ВЫБРАТЬ
			|			Остатки.Номенклатура                   КАК Номенклатура,
			|			Остатки.Характеристика                 КАК Характеристика,
			|			Остатки.Склад                          КАК Склад,
			|			Остатки.Назначение                     КАК Назначение,
			|			Остатки.КЗаказуОстаток                 КАК Заказать,
			|			Остатки.НаличиеПодЗаказОстаток         КАК Наличие,
			|			Остатки.ПотребностьОстаток             КАК Потребность
			|		ИЗ
			|			РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|				(Номенклатура, Характеристика, Склад, Назначение) В(
			|					ВЫБРАТЬ
			|						Таблица.Номенклатура,
			|						Таблица.Характеристика,
			|						Таблица.Склад,
			|						Таблица.Назначение
			|					ИЗ
			|						ОбеспечениеЗаказовИзменение КАК Таблица)) КАК Остатки
			|
			|	) КАК Остатки
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеЗаказовИзменение КАК ТаблицаИзменений
			|	ПО
			|		Остатки.Номенклатура     = ТаблицаИзменений.Номенклатура
			|		И Остатки.Характеристика = ТаблицаИзменений.Характеристика
			|		И Остатки.Склад          = ТаблицаИзменений.Склад
			|		И Остатки.Назначение     = ТаблицаИзменений.Назначение
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияОбеспечениеЗаказов КАК ДопустимыеОтклонения
			|		ПО
			|			Остатки.Номенклатура     = ДопустимыеОтклонения.Номенклатура
			|			И Остатки.Характеристика = ДопустимыеОтклонения.Характеристика
			|			И Остатки.Склад          = ДопустимыеОтклонения.Склад
			|			И Остатки.Назначение     = ДопустимыеОтклонения.Назначение
			|) КАК Таблица
			|ГДЕ
			|	Таблица.ОшибкаЗаказатьМеньшеНуля = ИСТИНА
			|	ИЛИ Таблица.ОшибкаНаличиеВМинусе = ИСТИНА
			|	ИЛИ Таблица.ОшибкаНаличиеБольшеПотребности = ИСТИНА";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";

	КонецЕсли;
	//++ НЕ УТ 

	
	// Контроль отрицательных остатков денежных документов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДенежныеДокументыИзменение") Тогда
		МассивКонтролей.Добавить(Врег("ДенежныеДокументы"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация				КАК Организация,
		|	ТаблицаОстатков.Подразделение			КАК Подразделение,
		|	ТаблицаОстатков.МОЛ						КАК МОЛ,
		|	ТаблицаОстатков.ДенежныйДокумент		КАК ДенежныйДокумент,
		|	ТаблицаОстатков.ДенежныйДокумент.Валюта	КАК Валюта,
		|	ТаблицаОстатков.СуммаОстаток			КАК Сумма,
		|	ТаблицаОстатков.КоличествоОстаток		КАК Количество
		|ИЗ
		|	РегистрНакопления.ДенежныеДокументы.Остатки(,
		|			(Организация, Подразделение, МОЛ, ДенежныйДокумент) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.МОЛ,
		|					Таблица.ДенежныйДокумент
		|				ИЗ
		|					ДвиженияДенежныеДокументыИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0
		|	ИЛИ ТаблицаОстатков.СуммаОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыПереданныеПереработчику.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыПереданныеПереработчикуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыПереданныеПереработчику"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыПереданныеПереработчику.Остатки(,
		|			АналитикаУчетаНоменклатуры В
		|				(ВЫБРАТЬ
		|					Таблица.АналитикаУчетаНоменклатуры
		|				ИЗ
		|					ДвиженияТоварыПереданныеПереработчикуИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	//-- НЕ УТ

	// Контроль отрицательных остатков ОбеспечениеЗаказовРаботами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ОбеспечениеЗаказовРаботамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ОбеспечениеЗаказовРаботами"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Назначение          КАК Назначение,
		|	ТаблицаОстатков.Номенклатура        КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика      КАК Характеристика,
		|	ТаблицаОстатков.Подразделение       КАК Подразделение,
		|	ТаблицаОстатков.КОбеспечениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
		|			(Назначение, Номенклатура, Характеристика, Подразделение) В
		|				(ВЫБРАТЬ
		|					Таблица.Назначение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Подразделение
		|				ИЗ
		|					ОбеспечениеЗаказовРаботамиИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОбеспечениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаСборку.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаСборкуИзменение") Тогда

		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ЗаказыНаСборку"));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.ЗаказНаСборку      КАК ЗаказНаСборку,
			|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика     КАК Характеристика,
			|	ТаблицаОстатков.Серия              КАК Серия,
			|	ТаблицаОстатков.ТипСборки          КАК ТипСборки,
			|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыНаСборку.Остатки(,
			|			(ЗаказНаСборку, Номенклатура, Характеристика, Серия, ТипСборки) В
			|				(ВЫБРАТЬ
			|					Таблица.ЗаказНаСборку,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.ТипСборки
			|				ИЗ
			|					ДвиженияЗаказыНаСборкуИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
		
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ЗаказыОстатки.ЗаказНаСборку                  КАК ЗаказНаСборку,
			|	ЗаказыОстатки.Номенклатура                   КАК Номенклатура,
			|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ЗаказыОстатки.Характеристика                 КАК Характеристика,
			|	ЗаказыОстатки.Серия                          КАК Серия,
			|	ЗаказыОстатки.ТипСборки                      КАК ТипСборки,
			|	ЗаказыОстатки.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	ВТЗаказыНаСборкуОстатки КАК ЗаказыОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаказыНаСборку КАК ДопустимыеОтклонения
			|		ПО
			|			ЗаказыОстатки.ЗаказНаСборку    = ДопустимыеОтклонения.ЗаказНаСборку
			|			И ЗаказыОстатки.Номенклатура   = ДопустимыеОтклонения.Номенклатура
			|			И ЗаказыОстатки.Характеристика = ДопустимыеОтклонения.Характеристика
			|			И ЗаказыОстатки.ТипСборки      = ДопустимыеОтклонения.ТипСборки
			|			И ЗаказыОстатки.Серия          = ДопустимыеОтклонения.Серия
			|ГДЕ
			|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаПеремещение.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаПеремещениеИзменение") Тогда

		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ЗаказыНаПеремещение"));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.ЗаказНаПеремещение КАК Заказ,
			|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика     КАК Характеристика,
			|	ТаблицаОстатков.Серия              КАК Серия,
			|	НЕОПРЕДЕЛЕНО                       КАК Склад,
			|	НЕОПРЕДЕЛЕНО                       КАК Подразделение,
			|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
			|			(ЗаказНаПеремещение, Номенклатура, Характеристика, Серия) В
			|				(ВЫБРАТЬ
			|					Таблица.ЗаказНаПеремещение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия
			|				ИЗ
			|					ДвиженияЗаказыНаПеремещениеИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ЗаказыОстатки.ЗаказНаПеремещение             КАК Заказ,
			|	ЗаказыОстатки.Номенклатура                   КАК Номенклатура,
			|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ЗаказыОстатки.Характеристика                 КАК Характеристика,
			|	ЗаказыОстатки.Серия                          КАК Серия,
			|	НЕОПРЕДЕЛЕНО                                 КАК Склад,
			|	НЕОПРЕДЕЛЕНО                                 КАК Подразделение,
			|	ЗаказыОстатки.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	ВТЗаказыНаПеремещениеОстатки КАК ЗаказыОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаказыНаПеремещение КАК ДопустимыеОтклонения
			|		ПО
			|			ЗаказыОстатки.ЗаказНаПеремещение = ДопустимыеОтклонения.ЗаказНаПеремещение
			|			И ЗаказыОстатки.Номенклатура     = ДопустимыеОтклонения.Номенклатура
			|			И ЗаказыОстатки.Характеристика   = ДопустимыеОтклонения.Характеристика
			|			И ЗаказыОстатки.Серия            = ДопустимыеОтклонения.Серия
			|ГДЕ
			|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаВнутреннееПотребление.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаВнутреннееПотреблениеИзменение") Тогда

		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ЗаказыНаВнутреннееПотребление"));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.ЗаказНаВнутреннееПотребление  КАК Заказ,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.Склад                         КАК Склад,
			|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,
			|			(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, Серия, Склад) В
			|				(ВЫБРАТЬ
			|					Таблица.ЗаказНаВнутреннееПотребление,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.Склад
			|				ИЗ
			|					ДвиженияЗаказыНаВнутреннееПотреблениеИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
		
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ЗаказыОстатки.ЗаказНаВнутреннееПотребление   КАК Заказ,
			|	ЗаказыОстатки.Номенклатура                   КАК Номенклатура,
			|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ЗаказыОстатки.Характеристика                 КАК Характеристика,
			|	ЗаказыОстатки.Серия                          КАК Серия,
			|	ЗаказыОстатки.Склад                          КАК Склад,
			|	ЗаказыОстатки.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	ВТЗаказыНаВнутреннееПотреблениеОстатки КАК ЗаказыОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаказыНаВнутреннееПотребление КАК ДопустимыеОтклонения
			|		ПО
			|			ЗаказыОстатки.ЗаказНаВнутреннееПотребление = ДопустимыеОтклонения.ЗаказНаВнутреннееПотребление
			|			И ЗаказыОстатки.Номенклатура               = ДопустимыеОтклонения.Номенклатура
			|			И ЗаказыОстатки.Характеристика             = ДопустимыеОтклонения.Характеристика
			|			И ЗаказыОстатки.Склад                      = ДопустимыеОтклонения.Склад
			|			И ЗаказыОстатки.Серия                      = ДопустимыеОтклонения.Серия
			|ГДЕ
			|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";

	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыКОтгрузке.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтгрузкеИзменение") Тогда
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ТоварыКОтгрузке"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.Назначение КАК Назначение,
		|	ТаблицаОстатков.Серия КАК Серия,
		|	ТаблицаОстатков.Получатель                    КАК Получатель,
		|	ТаблицаОстатков.Склад КАК Склад,
		|	ТаблицаОстатков.КОтгрузкеОстаток - ТаблицаОстатков.СобираетсяОстаток - ТаблицаОстатков.СобраноОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,
		|			(ДокументОтгрузки, Номенклатура, Характеристика, Назначение, Серия, Получатель, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОтгрузки,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Назначение,
		|					Таблица.Серия,
		|					Таблица.Получатель,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменение КАК Таблица)) КАК ТаблицаОстатков";
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(
			|				,
			|				,
			|				,
			|				(ДокументОтгрузки, Номенклатура, Характеристика, Назначение, Серия, Склад) В
			|					(ВЫБРАТЬ
			|						Таблица.ДокументОтгрузки,
			|						Таблица.Номенклатура,
			|						Таблица.Характеристика,
			|						Таблица.Назначение,
			|						Таблица.Серия,
			|						Таблица.Склад
			|					ИЗ
			|						ДвиженияТоварыКОтгрузкеИзменение КАК Таблица)) КАК ТаблицаОборотов
			|		ПО ТаблицаОстатков.ДокументОтгрузки = ТаблицаОборотов.ДокументОтгрузки
			|			И ТаблицаОстатков.Номенклатура = ТаблицаОборотов.Номенклатура
			|			И ТаблицаОстатков.Характеристика = ТаблицаОборотов.Характеристика
			|			И ТаблицаОстатков.Назначение = ТаблицаОборотов.Назначение
			|			И ТаблицаОстатков.Серия = ТаблицаОборотов.Серия
			|			И ТаблицаОстатков.Склад = ТаблицаОборотов.Склад
			|ГДЕ
			|	ТаблицаОстатков.КОтгрузкеОстаток - ТаблицаОстатков.СобираетсяОстаток - ТаблицаОстатков.СобраноОстаток < ВЫБОР
			|			КОГДА ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|				ТОГДА -&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ТаблицаОборотов.КОтгрузкеПриход
			|			ИНАЧЕ 0
			|		КОНЕЦ";
			ПакетЗапросов.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
				ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
			ПакетЗапросов.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
				Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ТаблицаОстатков.КОтгрузкеОстаток - ТаблицаОстатков.СобираетсяОстаток - ТаблицаОстатков.СобраноОстаток < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыКлиентовИзменение") Тогда

		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ЗаказыКлиентов"));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.ЗаказКлиента                   КАК Заказ,
			|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
			|	ТаблицаОстатков.Серия                          КАК Серия,
			|	ТаблицаОстатков.Склад                          КАК Склад,
			|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
			|			(ЗаказКлиента, Номенклатура, Характеристика, Серия, Склад) В
			|				(ВЫБРАТЬ
			|					Таблица.ЗаказКлиента,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.Склад
			|				ИЗ
			|					ДвиженияЗаказыКлиентовИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ЗаказыОстатки.ЗаказКлиента                   КАК Заказ,
			|	ЗаказыОстатки.Номенклатура                   КАК Номенклатура,
			|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ЗаказыОстатки.Характеристика                 КАК Характеристика,
			|	ЗаказыОстатки.Серия                          КАК Серия,
			|	ЗаказыОстатки.Склад                          КАК Склад,
			|	ЗаказыОстатки.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	ВТЗаказыКлиентовОстатки КАК ЗаказыОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаказыКлиентов КАК ДопустимыеОтклонения
			|		ПО
			|			ЗаказыОстатки.ЗаказКлиента     = ДопустимыеОтклонения.ЗаказКлиента
			|			И ЗаказыОстатки.Номенклатура   = ДопустимыеОтклонения.Номенклатура
			|			И ЗаказыОстатки.Характеристика = ДопустимыеОтклонения.Характеристика
			|			И ЗаказыОстатки.Склад          = ДопустимыеОтклонения.Склад
			|			И ЗаказыОстатки.Серия          = ДопустимыеОтклонения.Серия
			|ГДЕ
			|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыПоставщикам.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыПоставщикамИзменение") Тогда

		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ЗаказыПоставщикам"));
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.ЗаказПоставщику                КАК Заказ,
			|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
			|	ТаблицаОстатков.Склад                          КАК Склад,
			|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
			|			(ЗаказПоставщику, Номенклатура, Характеристика, Склад) В
			|				(ВЫБРАТЬ
			|					Таблица.ЗаказПоставщику,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Склад
			|				ИЗ
			|					ДвиженияЗаказыПоставщикамИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ЗаказыОстатки.ЗаказПоставщику                КАК Заказ,
			|	ЗаказыОстатки.Номенклатура                   КАК Номенклатура,
			|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|	ЗаказыОстатки.Характеристика                 КАК Характеристика,
			|	ЗаказыОстатки.Склад                          КАК Склад,
			|	ЗаказыОстатки.КОформлениюОстаток             КАК Количество
			|ИЗ
			|	ВТЗаказыПоставщикамОстатки КАК ЗаказыОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаказыПоставщикам КАК ДопустимыеОтклонения
			|		ПО
			|			ЗаказыОстатки.ЗаказПоставщику  = ДопустимыеОтклонения.ЗаказПоставщику
			|			И ЗаказыОстатки.Номенклатура   = ДопустимыеОтклонения.Номенклатура
			|			И ЗаказыОстатки.Характеристика = ДопустимыеОтклонения.Характеристика
			|			И ЗаказыОстатки.Склад          = ДопустимыеОтклонения.Склад
			|ГДЕ
			|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	// Контроль отрицательных остатков по возвратам от хранителей.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно")
		Или ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыОрганизацийИзменениеСводно") Тогда
		
			МассивКонтролей.Добавить(Врег("ВТ_ОстатокКОформлениюПоЗаявкам"));
			МассивКонтролей.Добавить(Врег("ВТ_ОтборАналитикУчетаНоменклатуры"));
			МассивКонтролей.Добавить(Врег("ВТ_ОстатокПоТоварамОрганизаций"));
			МассивКонтролей.Добавить(Врег("ВозвратТоваровОтХранителей"));
			
			ТекстЗапросаКонтрольЗаявокНаВозвратПоТоварамОрганизаций = "
			|ВЫБРАТЬ
			|	ТаблицаОстатков.Договор                         КАК Договор,
			|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
			|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
			|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
			|ПОМЕСТИТЬ ВТ_ОстатокКОформлениюПоЗаявкам
			|ИЗ
			|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
			|			(Договор, Номенклатура, Характеристика) В
			|				(ВЫБРАТЬ
			|					Таблица.Договор,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика
			|				ИЗ
			|					&ИмяТаблицыСводно КАК Таблица)
			|	) КАК ТаблицаОстатков
			|;
			|
			|ВЫБРАТЬ
			|	Аналитики.КлючАналитики КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ОтборАналитикУчетаНоменклатуры
			|ИЗ
			|	&ИмяТаблицыСводно КАК ОстаткиПоЗаявкам
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
			|	ПО ОстаткиПоЗаявкам.Номенклатура  = Аналитики.Номенклатура
			|		И ОстаткиПоЗаявкам.Характеристика = Аналитики.Характеристика
			|		И ОстаткиПоЗаявкам.Договор        = Аналитики.МестоХранения
			|;
			|
			|ВЫБРАТЬ
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Договор        КАК Договор,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
			|	ТаблицаОстатков.КоличествоОстаток                         КАК Количество
			|ПОМЕСТИТЬ ВТ_ОстатокПоТоварамОрганизаций
			|ИЗ
			|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
			|			(АналитикаУчетаНоменклатуры) В
			|				(ВЫБРАТЬ
			|					ОтборАналитик.Ссылка
			|				ИЗ
			|					ВТ_ОтборАналитикУчетаНоменклатуры КАК ОтборАналитик)
			|	) КАК ТаблицаОстатков
			|;
			|
			|ВЫБРАТЬ
			|	ТаблицаОстатков.Договор                       КАК Договор,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	СУММА(ТаблицаОстатков.Количество)             КАК Количество
			|ИЗ
			|	(
			|	ВЫБРАТЬ
			|		ТоварыОрганизаций.Договор                       КАК Договор,
			|		ТоварыОрганизаций.Номенклатура                  КАК Номенклатура,
			|		ТоварыОрганизаций.Характеристика                КАК Характеристика,
			|		ТоварыОрганизаций.Количество                    КАК Количество
			|	ИЗ
			|		ВТ_ОстатокПоТоварамОрганизаций КАК ТоварыОрганизаций
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ЗаявкиНаВозврат.Договор                       КАК Договор,
			|		ЗаявкиНаВозврат.Номенклатура                  КАК Номенклатура,
			|		ЗаявкиНаВозврат.Характеристика                КАК Характеристика,
			|		-ЗаявкиНаВозврат.Количество                   КАК Количество
			|	ИЗ
			|		ВТ_ОстатокКОформлениюПоЗаявкам КАК ЗаявкиНаВозврат
			|	) КАК ТаблицаОстатков
			|
			|СГРУППИРОВАТЬ ПО
			|	Договор,
			|	Номенклатура,
			|	Характеристика
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТаблицаОстатков.Количество) < 0
			|";
			
			ИмяТаблицыСводно = ?(ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно"),
				"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно",
				"ДвиженияТоварыОрганизацийИзменениеСводно");
			
			ТекстЗапросаКонтрольЗаявокНаВозвратПоТоварамОрганизаций =
				 СтрЗаменить(ТекстЗапросаКонтрольЗаявокНаВозвратПоТоварамОрганизаций, "&ИмяТаблицыСводно", ИмяТаблицыСводно);
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаКонтрольЗаявокНаВозвратПоТоварамОрганизаций;
			
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|///////////////////////////////////////////////////////////////////
			|";
			
	КонецЕсли;
	
	// Контроль отрицательных остатков ЗаявкиНаВозвратТоваровОтКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ЗаявкиНаВозвратТоваровОтКлиентов"));
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
			|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
			|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
			|			(ЗаявкаНаВозвратТоваровОтКлиента, Номенклатура, Характеристика) В
			|				(ВЫБРАТЬ
			|					Таблица.ЗаявкаНаВозвратТоваровОтКлиента,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика
			|				ИЗ
			|					ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0";
		
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ЗаказыОстатки.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
			|	ЗаказыОстатки.Номенклатура                    КАК Номенклатура,
			|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
			|	ЗаказыОстатки.Характеристика                  КАК Характеристика,
			|	ЗаказыОстатки.КОформлениюОстаток              КАК Количество
			|ИЗ
			|	ВТЗаявкиНаВозвратТоваровОтКлиентовОстатки КАК ЗаказыОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаявкиНаВозвратТоваровОтКлиентов КАК ДопустимыеОтклонения
			|		ПО
			|			ЗаказыОстатки.ЗаявкаНаВозвратТоваровОтКлиента = ДопустимыеОтклонения.ЗаявкаНаВозвратТоваровОтКлиента
			|			И ЗаказыОстатки.Номенклатура                  = ДопустимыеОтклонения.Номенклатура
			|			И ЗаказыОстатки.Характеристика                = ДопустимыеОтклонения.Характеристика
			|ГДЕ
			|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	// Контроль отрицательных остатков по ДенежныеСредстваКВыплате.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКВыплате"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ТаблицаОстатков.БанковскийСчетКасса                 КАК БанковскийСчетКасса,
		|	ТаблицаОстатков.Получатель                          КАК Получатель,
		|	ТаблицаОстатков.Организация                         КАК Организация,
		|	ТаблицаОстатков.СуммаОстаток                        КАК Сумма,
		|	
		|	Заявка.Организация                                  КАК ОрганизацияЗаявки,
		|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
		|	) ТОГДА
		|		Заявка.ПодотчетноеЛицо
		|	КОГДА Заявка.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		|	) ТОГДА
		|		Заявка.ОрганизацияПолучатель
		|	ИНАЧЕ
		|		Заявка.Контрагент
		|	КОНЕЦ                                               КАК ПолучательЗаявки,
		|	Заявка.Валюта                                       КАК Валюта,
		|	Заявка.ХозяйственнаяОперация                        КАК ХозяйственнаяОперация
		|	
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
		|		(ЗаявкаНаРасходованиеДенежныхСредств, БанковскийСчетКасса, Получатель, Организация) В
		|		(ВЫБРАТЬ
		|			Таблица.ЗаявкаНаРасходованиеДенежныхСредств,
		|			Таблица.БанковскийСчетКасса,
		|			Таблица.Получатель,
		|			Таблица.Организация
		|		ИЗ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица)
		|		) КАК ТаблицаОстатков
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|	ПО
		|		ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка
		|
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток < 0
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль предоплаты по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("РасчетыСКлиентами"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
		|	ТаблицаЗаказы.Валюта       КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)                 КАК СуммаЗаказа,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ +
		|		ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ТаблицаЗаказы.Оплачивается
		|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
		|		КОНЕЦ)                 КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаЗаказы
		|ГДЕ
		|	(ТаблицаЗаказы.ЗаказКлиента, ТаблицаЗаказы.Валюта, ТаблицаЗаказы.Активность) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаказКлиента,
		|				Таблица.Валюта,
		|				ИСТИНА
		|			ИЗ
		|				ДвиженияРасчетыСКлиентамиИзменение КАК Таблица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.Валюта,
		|	ТаблицаЗаказы.ЗаказКлиента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ) > 0
		|	И
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|	> 
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ +
		|		ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ТаблицаЗаказы.Оплачивается
		|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
		|		КОНЕЦ)
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

		// Контроли по РасчетыСКлиентами (временные таблицы).
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга")
	 ИЛИ ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда

		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоровИзменениеСуммыДолга"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоровИзменениеКонтрольСрока"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоровПредварительные"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоров"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОбъектыРасчетов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга.АналитикаУчетаПоПартнерам.Договор КАК Договор
		|ПОМЕСТИТЬ ДанныеДоговоровИзменениеСуммыДолга
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока.АналитикаУчетаПоПартнерам.Договор КАК Договор
		|ПОМЕСТИТЬ ДанныеДоговоровИзменениеКонтрольСрока
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДвижений.Договор                             КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
		|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ПОМЕСТИТЬ ДанныеДоговоровПредварительные
		|ИЗ
		|	ДанныеДоговоровИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.Договор = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента                        КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
		|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.Договор                             КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
		|	0                                                   КАК ДопустимаяСуммаЗадолженности,
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДанныеДоговоровИзменениеКонтрольСрока КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.Договор = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента                        КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
		|	0                                                   КАК ДопустимаяСуммаЗадолженности,
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоговоров.Договор                                        КАК Договор,
		|	ДанныеДоговоров.Валюта                                         КАК Валюта,
		|	МАКСИМУМ(ДанныеДоговоров.ОграничиватьСуммуЗадолженности)       КАК КонтрольСуммы,
		|	МАКСИМУМ(ДанныеДоговоров.ДопустимаяСуммаЗадолженности)         КАК ДопустимаяСумма,
		|	МАКСИМУМ(ДанныеДоговоров.ЗапрещаетсяПросроченнаяЗадолженность) КАК КонтрольСрока
		|
		|ПОМЕСТИТЬ ДанныеДоговоров
		|ИЗ
		|	ДанныеДоговоровПредварительные КАК ДанныеДоговоров
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДоговоров.Договор,
		|	ДанныеДоговоров.Валюта
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДоговора.Ссылка  КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ПОМЕСТИТЬ ОбъектыРасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДоговора.Ссылка = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен И ДанныеДокумента.ПроведеноБанком
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
		
		ПакетЗапросов.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		
	КонецЕсли;
	
	// Контроль ограничения задолженности по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда
		
		МассивКонтролей.Добавить(Врег("ОграничениеСуммыЗадолженности"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
		|	МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)                  КАК ДопустимаяСуммаЗадолженности,
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
		|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток)    КАК СуммаОстаток,
		|
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
		|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) -
		|		МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)              КАК СуммаПревышения
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСуммы)
		|	) КАК РасчетыСКлиентамиОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов	
		|	ПО
		|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиОстатки.Валюта
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)+
		|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) > МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль просроченной задолженности по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда

		МассивКонтролей.Добавить(Врег("КонтрольСрокаЗадолженности"));
		ПакетЗапросов.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДатаСеанса()), КонецДня(Объект.Дата)));
		ПакетЗапросов.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Константы.НоваяАрхитектураВзаиморасчетов.Получить());
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
		|	СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >
		|						РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток ТОГДА
		|		РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.СуммаОстаток
		|	КОНЕЦ) КАК ПросроченнаяЗадолженность
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		&ПериодКонтроляСрокаДолга,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
		|	) КАК РасчетыСКлиентамиОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|	ПО
		|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|
		|ГДЕ
		|	НЕ &НоваяАрхитектураВзаиморасчетов
		|	И РасчетыСКлиентамиОстатки.СуммаОстаток > 0
		|	И (РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиОстатки.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиПоСрокамОстатки.Валюта                   КАК Валюта,
		|	СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
		|			- ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток,0)) КАК ПросроченнаяЗадолженность
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
		|		&ПериодКонтроляСрокаДолга,
		|		(ОбъектРасчетов, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
		|	) КАК РасчетыСКлиентамиПоСрокамОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|	ПО
		|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиПоСрокамОстатки.Валюта = ОбъектыРасчетов.Валюта
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ДанныеДоговоров КАК ДанныеДоговоров
		|	ПО
		|		ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|		И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		&ПериодКонтроляСрокаДолга,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
		|	) КАК РасчетыСКлиентамиОстатки
		|	ПО
		|		РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ЗаказКлиента
		|		И РасчетыСКлиентамиПоСрокамОстатки.Валюта = РасчетыСКлиентамиПоСрокамОстатки.Валюта
		|ГДЕ
		|	&НоваяАрхитектураВзаиморасчетов
		|	И РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(&ПериодКонтроляСрокаДолга,ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиПоСрокамОстатки.Валюта
		|
		|ИМЕЮЩИЕ СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток 
		|			- ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток,0)) > 0
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков авансов при расчетах по накладным.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным") Тогда
		
		МассивКонтролей.Добавить(Врег("КонтрольЗачтенныхАвансовПоНакладнымКлиент"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента          КАК ДокументАванса,
		|	РасчетыСКлиентамиОстатки.Валюта                КАК Валюта,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток          КАК СуммаПревышения
		|	
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ДвиженияРасчетыСКлиентамиИзменениеАвансыПоНакладным)
		|	) КАК РасчетыСКлиентамиОстатки
		|
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОстатки.ЗаказКлиента) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
		|													ТИП(Документ.ПриходныйКассовыйОрдер),
		|													ТИП(Документ.ОперацияПоПлатежнойКарте),
		|													ТИП(Документ.ВводОстатков))
		|
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	// Контроль отрицательных остатков авансов при расчетах по накладным.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным") Тогда
		
		МассивКонтролей.Добавить(Врег("КонтрольЗачтенныхАвансовПоНакладнымПоставщик"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику          КАК ДокументАванса,
		|	РасчетыСПоставщикамиОстатки.Валюта                   КАК Валюта,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток             КАК СуммаПревышения
		|	
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|		,
		|		(ЗаказПоставщику, Валюта) В (ВЫБРАТЬ ЗаказПоставщику, Валюта ИЗ ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным)
		|	) КАК РасчетыСПоставщикамиОстатки
		|
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
		|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиОстатки.ЗаказПоставщику) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
		|													ТИП(Документ.РасходныйКассовыйОрдер),
		|													ТИП(Документ.ВводОстатков))
		|
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	// Контроль остатков в ячейках по ТоварыВЯчейках.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыВЯчейкахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ВТМногооборотнаяТара"));
		МассивКонтролей.Добавить(Врег("ВТЯчейкиКонтролироватьОбособление"));
		МассивКонтролей.Добавить(Врег("ТоварыВЯчейках"));
		МассивКонтролей.Добавить(Врег("НесколькоНазначенийВОбособленныхЯчейках"));
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпрНоменклатура.Ссылка
		|ПОМЕСТИТЬ ВТМногооборотнаяТара
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СкладскиеЯчейки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЯчейкиКонтролироватьОбособление
		|ИЗ
		|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиХранения КАК ОбластиХранения
		|		ПО СкладскиеЯчейки.ОбластьХранения = ОбластиХранения.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияТоварыВЯчейкахИзменение КАК ДвиженияТоварыВЯчейкахИзменение
		|		ПО СкладскиеЯчейки.Ссылка = ДвиженияТоварыВЯчейкахИзменение.Ячейка
		|ГДЕ
		|	ОбластиХранения.КонтролироватьОбособление
		|	И ДвиженияТоварыВЯчейкахИзменение.КРазмещениюИзменение < 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
		|	ВЫБОР
		|		КОГДА ТоварыВЯчейкахОстатки.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА
		|				ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения
		|			ИНАЧЕ
		|				ТоварыВЯчейкахОстатки.Упаковка
		|		КОНЕЦ КАК Упаковка,
		|	ТаблицаИзменений.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Количество
		|ИЗ
		|	ДвиженияТоварыВЯчейкахИзменение КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Назначение, Упаковка, Ячейка) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Упаковка,
		|						Таблица.Ячейка
		|					ИЗ
		|						ДвиженияТоварыВЯчейкахИзменение КАК Таблица)) КАК ТоварыВЯчейкахОстатки
		|		ПО ТаблицаИзменений.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|			И ТаблицаИзменений.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		|			И ТаблицаИзменений.Назначение = ТоварыВЯчейкахОстатки.Назначение
		|			И ТаблицаИзменений.Упаковка = ТоварыВЯчейкахОстатки.Упаковка
		|			И ТаблицаИзменений.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
		|			И (ВЫБОР
		|				КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаИзменений.Серия = ТоварыВЯчейкахОстатки.Серия
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение,
		|	ТоварыВЯчейкахОстатки.Упаковка,
		|	ТаблицаИзменений.Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Ячейка
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			Ячейка В
		|					(ВЫБРАТЬ
		|						ВТЯчейкиКонтролироватьОбособление.Ссылка
		|					ИЗ
		|						ВТЯчейкиКонтролироватьОбособление КАК ВТЯчейкиКонтролироватьОбособление)
		|				И НЕ Номенклатура В
		|						(ВЫБРАТЬ
		|							ВТМногооборотнаяТара.Ссылка
		|						ИЗ
		|							ВТМногооборотнаяТара КАК ВТМногооборотнаяТара)
		|				И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыВЯчейкахОстатки
		|ГДЕ
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток + ТоварыВЯчейкахОстатки.КРазмещениюОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВЯчейкахОстатки.Ячейка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыВЯчейкахОстатки.Назначение) > 1";
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	// Контроль остатков по ТоварыНаСкладах 
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыНаСкладахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыНаСкладах"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Назначение КАК Назначение,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
		|	ТаблицаИзменений.Серия КАК Серия,
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК Количество
		|ИЗ
		|	ДвиженияТоварыНаСкладахИзменение КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Назначение, Склад, Помещение) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Склад,
		|						Таблица.Помещение
		|					ИЗ
		|						ДвиженияТоварыНаСкладахИзменение КАК Таблица)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаИзменений.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТаблицаИзменений.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		|			И ТаблицаИзменений.Назначение = ТоварыНаСкладахОстатки.Назначение
		|			И ТаблицаИзменений.Склад = ТоварыНаСкладахОстатки.Склад
		|			И ТаблицаИзменений.Помещение = ТоварыНаСкладахОстатки.Помещение
		|			И (ВЫБОР
		|				КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаИзменений.Серия = ТоварыНаСкладахОстатки.Серия
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.Назначение,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение,
		|	ТаблицаИзменений.Серия
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков по ТоварыКОтбору.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтборуИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ТоварныеМестаНоменклатуры"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияТоварыКОтборуИзменение.Распоряжение,
		|	ДвиженияТоварыКОтборуИзменение.Номенклатура,
		|	ДвиженияТоварыКОтборуИзменение.Характеристика,
		|	ДвиженияТоварыКОтборуИзменение.Назначение,
		|	ДвиженияТоварыКОтборуИзменение.Серия,
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
		|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
		|ПОМЕСТИТЬ ТоварныеМестаНоменклатуры
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияТоварыКОтборуИзменение КАК ДвиженияТоварыКОтборуИзменение
		|		ПО УпаковкиЕдиницыИзмерения.Владелец = ДвиженияТоварыКОтборуИзменение.Номенклатура
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияТоварыКОтборуИзменение.Распоряжение,
		|	ДвиженияТоварыКОтборуИзменение.Номенклатура,
		|	ДвиженияТоварыКОтборуИзменение.Характеристика,
		|	ДвиженияТоварыКОтборуИзменение.Назначение,
		|	ДвиженияТоварыКОтборуИзменение.Серия,
		|	УпаковкиЕдиницыИзмерения.Ссылка,
		|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияТоварыКОтборуИзменение КАК ДвиженияТоварыКОтборуИзменение
		|		ПО УпаковкиЕдиницыИзмерения.Владелец = ДвиженияТоварыКОтборуИзменение.Номенклатура.НаборУпаковок
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)";
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			
			МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОборотовСТоварнымиМестами"));
			МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОборотов"));
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ
			|	ТоварыКОтборуОбороты.Распоряжение КАК Распоряжение,
			|	ТоварыКОтборуОбороты.Номенклатура КАК Номенклатура,
			|	ТоварыКОтборуОбороты.Характеристика КАК Характеристика,
			|	ТоварыКОтборуОбороты.Назначение КАК Назначение,
			|	ТоварыКОтборуОбороты.Серия КАК Серия,
			|	ТоварыКОтборуОбороты.ТоварноеМесто КАК ТоварноеМесто,
			|	СУММА(ТоварыКОтборуОбороты.КОтборуПриход) КАК Количество
			|ПОМЕСТИТЬ ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами
			|ИЗ
			|	РегистрНакопления.ТоварыКОтбору.Обороты(
			|			,
			|			,
			|			,
			|			(Распоряжение, Номенклатура, Характеристика, Назначение, Серия) В
			|				(ВЫБРАТЬ
			|					Таблица.Распоряжение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Назначение,
			|					Таблица.Серия
			|				ИЗ
			|					ДвиженияТоварыКОтборуИзменение КАК Таблица)) КАК ТоварыКОтборуОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКОтборуОбороты.Распоряжение,
			|	ТоварыКОтборуОбороты.Номенклатура,
			|	ТоварыКОтборуОбороты.Характеристика,
			|	ТоварыКОтборуОбороты.Назначение,
			|	ТоварыКОтборуОбороты.Серия,
			|	ТоварыКОтборуОбороты.ТоварноеМесто
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВнутренняяТаблица.Распоряжение,
			|	ВнутренняяТаблица.Номенклатура,
			|	ВнутренняяТаблица.Характеристика,
			|	ВнутренняяТаблица.Назначение,
			|	ВнутренняяТаблица.Серия,
			|	СУММА(ВнутренняяТаблица.Количество) КАК Количество
			|ПОМЕСТИТЬ ВременнаяТаблицаТаблицаОборотов
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварныеМестаНоменклатуры.Распоряжение КАК Распоряжение,
			|		ТоварныеМестаНоменклатуры.Номенклатура КАК Номенклатура,
			|		ТоварныеМестаНоменклатуры.Характеристика КАК Характеристика,
			|		ТоварныеМестаНоменклатуры.Назначение КАК Назначение,
			|		ТоварныеМестаНоменклатуры.Серия КАК Серия,
			|		МИНИМУМ(ВЫБОР
			|				КОГДА ЕСТЬNULL(ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Количество, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок - (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Количество, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
			|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Количество, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))
			|				ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Количество, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
			|			КОНЕЦ) КАК Количество
			|	ИЗ
			|		ТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами КАК ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами
			|			ПО ТоварныеМестаНоменклатуры.Распоряжение = ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Распоряжение
			|				И ТоварныеМестаНоменклатуры.Номенклатура = ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Номенклатура
			|				И ТоварныеМестаНоменклатуры.Характеристика = ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Характеристика
			|				И ТоварныеМестаНоменклатуры.Назначение = ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Назначение
			|				И ТоварныеМестаНоменклатуры.Серия = ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Серия
			|				И ТоварныеМестаНоменклатуры.ТоварноеМесто = ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.ТоварноеМесто
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТоварныеМестаНоменклатуры.Распоряжение,
			|		ТоварныеМестаНоменклатуры.Номенклатура,
			|		ТоварныеМестаНоменклатуры.Характеристика,
			|		ТоварныеМестаНоменклатуры.Назначение,
			|		ТоварныеМестаНоменклатуры.Серия
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Распоряжение,
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Номенклатура,
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Характеристика,
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Назначение,
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Серия,
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.Количество
			|	ИЗ
			|		ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами КАК ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами
			|	ГДЕ
			|		ЕСТЬNULL(ВременнаяТаблицаТаблицаОборотовСТоварнымиМестами.ТоварноеМесто.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)) КАК ВнутренняяТаблица
			|
			|СГРУППИРОВАТЬ ПО
			|	ВнутренняяТаблица.Распоряжение,
			|	ВнутренняяТаблица.Номенклатура,
			|	ВнутренняяТаблица.Характеристика,
			|	ВнутренняяТаблица.Назначение,
			|	ВнутренняяТаблица.Серия";
			
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
		КонецЕсли;
				
		
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОстатковСТоварнымиМестами"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОстатков"));
		МассивКонтролей.Добавить(Врег("ТоварыКОтбору"));
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
		|	ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКОтборуОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтборуОстатки.Назначение КАК Назначение,
		|	ТоварыКОтборуОстатки.Серия КАК Серия,
		|	ТоварыКОтборуОстатки.ТоварноеМесто КАК ТоварноеМесто,
		|	СУММА(ТоварыКОтборуОстатки.КОтборуОстаток) КАК КОтборуОстаток,
		|	СУММА(ТоварыКОтборуОстатки.ОтбираетсяОстаток) КАК ОтбираетсяОстаток,
		|	СУММА(ТоварыКОтборуОстатки.ОтобраноОстаток) КАК ОтобраноОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			(Распоряжение, Номенклатура, Характеристика, Назначение, Серия) В
		|				(ВЫБРАТЬ
		|					Таблица.Распоряжение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Назначение,
		|					Таблица.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтборуИзменение КАК Таблица)) КАК ТоварыКОтборуОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтборуОстатки.Распоряжение,
		|	ТоварыКОтборуОстатки.Номенклатура,
		|	ТоварыКОтборуОстатки.Характеристика,
		|	ТоварыКОтборуОстатки.Назначение,
		|	ТоварыКОтборуОстатки.Серия,
		|	ТоварыКОтборуОстатки.ТоварноеМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренняяТаблица.Распоряжение,
		|	ВнутренняяТаблица.Номенклатура,
		|	ВнутренняяТаблица.Характеристика,
		|	ВнутренняяТаблица.Назначение,
		|	ВнутренняяТаблица.Серия,
		|	СУММА(ВнутренняяТаблица.КОтборуОстаток) КАК КОтборуОстаток,
		|	СУММА(ВнутренняяТаблица.ОтбираетсяОстаток) КАК ОтбираетсяОстаток,
		|	СУММА(ВнутренняяТаблица.ОтобраноОстаток) КАК ОтобраноОстаток
		|ПОМЕСТИТЬ ВременнаяТаблицаТаблицаОстатков
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеМестаНоменклатуры.Распоряжение КАК Распоряжение,
		|		ТоварныеМестаНоменклатуры.Номенклатура КАК Номенклатура,
		|		ТоварныеМестаНоменклатуры.Характеристика КАК Характеристика,
		|		ТоварныеМестаНоменклатуры.Назначение КАК Назначение,
		|		ТоварныеМестаНоменклатуры.Серия КАК Серия,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.КОтборуОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок - (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.КОтборуОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
		|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.КОтборуОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))
		|				ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.КОтборуОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
		|			КОНЕЦ) КАК КОтборуОстаток,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтбираетсяОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок - (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтбираетсяОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
		|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтбираетсяОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))
		|				ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтбираетсяОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
		|			КОНЕЦ) КАК ОтбираетсяОстаток,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтобраноОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок - (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтобраноОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
		|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтобраноОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))
		|				ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтобраноОстаток, 0) / ТоварныеМестаНоменклатуры.ТоварноеМесто.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
		|			КОНЕЦ) КАК ОтобраноОстаток
		|	ИЗ
		|		ТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами КАК ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами
		|			ПО ТоварныеМестаНоменклатуры.Распоряжение = ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Распоряжение
		|				И ТоварныеМестаНоменклатуры.Номенклатура = ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Номенклатура
		|				И ТоварныеМестаНоменклатуры.Характеристика = ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Характеристика
		|				И ТоварныеМестаНоменклатуры.Назначение = ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Назначение
		|				И ТоварныеМестаНоменклатуры.Серия = ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Серия
		|				И ТоварныеМестаНоменклатуры.ТоварноеМесто = ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ТоварноеМесто
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТоварныеМестаНоменклатуры.Распоряжение,
		|		ТоварныеМестаНоменклатуры.Номенклатура,
		|		ТоварныеМестаНоменклатуры.Характеристика,
		|		ТоварныеМестаНоменклатуры.Назначение,
		|		ТоварныеМестаНоменклатуры.Серия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Распоряжение,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Номенклатура,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Характеристика,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Назначение,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.Серия,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.КОтборуОстаток,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтбираетсяОстаток,
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ОтобраноОстаток
		|	ИЗ
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами КАК ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами
		|	ГДЕ
		|		ВременнаяТаблицаТаблицаОстатковСТоварнымиМестами.ТоварноеМесто = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ВнутренняяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутренняяТаблица.Распоряжение,
		|	ВнутренняяТаблица.Номенклатура,
		|	ВнутренняяТаблица.Характеристика,
		|	ВнутренняяТаблица.Назначение,
		|	ВнутренняяТаблица.Серия";
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров <> 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Распоряжение,
			|	ТаблицаОстатков.Номенклатура,
			|	ТаблицаОстатков.Характеристика,
			|	ТаблицаОстатков.Назначение,
			|	ТаблицаОстатков.Серия,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.КОтборуОстаток - ТаблицаОстатков.ОтобраноОстаток - ТаблицаОстатков.ОтбираетсяОстаток КАК Количество,
			|	ТаблицаОстатков.ОтобраноОстаток КАК КоличествоОтобрано
			|ИЗ
			|	ВременнаяТаблицаТаблицаОстатков КАК ТаблицаОстатков
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТаблицаОборотов КАК ТаблицаОборотов
			|		ПО ТаблицаОстатков.Распоряжение = ТаблицаОборотов.Распоряжение
			|			И ТаблицаОстатков.Номенклатура = ТаблицаОборотов.Номенклатура
			|			И ТаблицаОстатков.Характеристика = ТаблицаОборотов.Характеристика
			|			И ТаблицаОстатков.Назначение = ТаблицаОборотов.Назначение
			|			И ТаблицаОстатков.Серия = ТаблицаОборотов.Серия
			|ГДЕ
			|	(ТаблицаОстатков.КОтборуОстаток - ТаблицаОстатков.ОтобраноОстаток - ТаблицаОстатков.ОтбираетсяОстаток < ВЫБОР
			|				КОГДА ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|					ТОГДА -&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100 * ЕСТЬNULL(ТаблицаОборотов.Количество, 0)
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|			ИЛИ ТаблицаОстатков.ОтобраноОстаток < 0
			|			ИЛИ ВЫБОР
			|				КОГДА ТаблицаОстатков.КОтборуОстаток = 0
			|					ТОГДА ТаблицаОстатков.ОтобраноОстаток <> 0
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)";
			
			ПакетЗапросов.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
			ПакетЗапросов.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Распоряжение,
			|	ТаблицаОстатков.Номенклатура,
			|	ТаблицаОстатков.Характеристика,
			|	ТаблицаОстатков.Назначение,
			|	ТаблицаОстатков.Серия,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.КОтборуОстаток - ТаблицаОстатков.ОтобраноОстаток - ТаблицаОстатков.ОтбираетсяОстаток КАК Количество,
			|	ТаблицаОстатков.ОтобраноОстаток КАК КоличествоОтобрано
			|ИЗ
			|	ВременнаяТаблицаТаблицаОстатков КАК ТаблицаОстатков
			|ГДЕ
			|	(ТаблицаОстатков.КОтборуОстаток - ТаблицаОстатков.ОтобраноОстаток - ТаблицаОстатков.ОтбираетсяОстаток < 0
			|			ИЛИ ТаблицаОстатков.ОтобраноОстаток < 0)";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		";
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыКОформлениюТаможенныхДеклараций.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОформлениюТаможенныхДекларацийИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыКОформлениюТаможенныхДеклараций"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация         КАК Организация,
		|	ТаблицаОстатков.Поставщик           КАК Поставщик,
		|	ТаблицаОстатков.ДокументПоступления КАК ДокументПоступления,
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.МестоХранения  КАК Склад,
		|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.ВидЗапасов          КАК ВидЗапасов,
		|	ТаблицаОстатков.КоличествоОстаток   КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(,
		|			(Организация, Поставщик, ДокументПоступления, АналитикаУчетаНоменклатуры, ВидЗапасов) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Поставщик,
		|					Таблица.ДокументПоступления,
		|					Таблица.АналитикаУчетаНоменклатуры,
		|					Таблица.ВидЗапасов
		|				ИЗ
		|					ДвиженияТоварыКОформлениюТаможенныхДекларацийИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	//++ НЕ УТ
	
	// Контроль отрицательных остатков ЗаказыМатериаловВПроизводство.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыМатериаловВПроизводствоИзменение") Тогда
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		МассивКонтролей.Добавить(Врег("ЗаказыМатериаловВПроизводство"));
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
			|	ТаблицаОстатков.Склад                         КАК Склад,
			|	ТаблицаОстатков.Назначение                    КАК Назначение,
			|	ТаблицаОстатков.НазначениеОтправителя         КАК НазначениеОтправителя,
			|	ТаблицаОстатков.Подразделение                 КАК Подразделение,
			|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(,
			|			(Распоряжение, Номенклатура, Характеристика, Серия, КодСтроки, Склад, Назначение, НазначениеОтправителя, Подразделение) В
			|				(ВЫБРАТЬ
			|					Таблица.Распоряжение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.КодСтроки,
			|					Таблица.Склад,
			|					Таблица.Назначение,
			|					Таблица.НазначениеОтправителя,
			|					Таблица.Подразделение
			|				ИЗ
			|					ДвиженияЗаказыМатериаловВПроизводствоИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток < 0;
			|///////////////////////////////////////////////////////////////////
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ
			|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
			|	ТаблицаОстатков.Склад                         КАК Склад,
			|	ТаблицаОстатков.Назначение                    КАК Назначение,
			|	ТаблицаОстатков.НазначениеОтправителя         КАК НазначениеОтправителя,
			|	ТаблицаОстатков.Подразделение                 КАК Подразделение,
			|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
			|ИЗ
			|	ВТЗаказыМатериаловВПроизводствоОстатки  КАК ТаблицаОстатков
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		ВТДопустимыеОтклоненияЗаказыМатериаловВПроизводство КАК ДопустимыеОтклонения
			|		ПО
			|			ТаблицаОстатков.Распоряжение     = ДопустимыеОтклонения.Распоряжение
			|			И ТаблицаОстатков.Номенклатура   = ДопустимыеОтклонения.Номенклатура
			|			И ТаблицаОстатков.Характеристика = ДопустимыеОтклонения.Характеристика
			|			И ТаблицаОстатков.Склад          = ДопустимыеОтклонения.Склад
			|			И ТаблицаОстатков.Серия          = ДопустимыеОтклонения.Серия
			|			И ТаблицаОстатков.Назначение     = ДопустимыеОтклонения.Назначение
			|			И ТаблицаОстатков.НазначениеОтправителя = ДопустимыеОтклонения.НазначениеОтправителя
			|			И ТаблицаОстатков.Подразделение  = ДопустимыеОтклонения.Подразделение
			|
			|ГДЕ
			|	ТаблицаОстатков.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0;
			|///////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Контроль отрицательных остатков РаспоряженияНаСписаниеПоНормативам
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль"));
		МассивКонтролей.Добавить(Врег("РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату"));
		
		МассивКонтролей.Добавить(Врег("РаспоряженияНаСписаниеПоНормативам"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОстатков.Организация КАК Организация,
		|	ТаблицаОстатков.Подразделение КАК Подразделение,
		|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.Распоряжение КАК Распоряжение,
		|	ТаблицаОстатков.КодСтроки КАК КодСтроки,
		|	ТаблицаОстатков.Назначение КАК Назначение,
		|	ТаблицаОстатков.КоличествоОстаток КАК Количество
		|ПОМЕСТИТЬ РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки(
		|			,
		|			(Организация, Подразделение, Номенклатура, Характеристика, Распоряжение, КодСтроки, Назначение) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Распоряжение,
		|					Таблица.КодСтроки,
		|					Таблица.Назначение
		|				ИЗ
		|					ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение КАК Таблица)) КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Организация,
		|	Таблица.Подразделение,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Распоряжение,
		|	Таблица.КодСтроки,
		|	Таблица.Назначение
		|ПОМЕСТИТЬ РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату
		|ИЗ
		|	ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль КАК РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль
		|		ПО Таблица.Организация = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Организация
		|			И Таблица.Подразделение = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Подразделение
		|			И Таблица.Номенклатура = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Номенклатура
		|			И Таблица.Характеристика = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Характеристика
		|			И Таблица.Распоряжение = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Распоряжение
		|			И Таблица.КодСтроки = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.КодСтроки
		|			И Таблица.Назначение = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Назначение
		|ГДЕ
		|	РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Распоряжение ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК КонтрольНаДату,
		|	ТаблицаОстатков.Организация КАК Организация,
		|	ТаблицаОстатков.Подразделение КАК Подразделение,
		|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика КАК Характеристика,
		|	ТаблицаОстатков.Распоряжение КАК Распоряжение,
		|	ТаблицаОстатков.КодСтроки КАК КодСтроки,
		|	ТаблицаОстатков.Назначение КАК Назначение,
		|	ТаблицаОстатков.Количество КАК Количество
		|ИЗ
		|	РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль КАК ТаблицаОстатков
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	ТаблицаОстатков.Организация,
		|	ТаблицаОстатков.Подразделение,
		|	ТаблицаОстатков.Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика,
		|	ТаблицаОстатков.Распоряжение,
		|	ТаблицаОстатков.КодСтроки,
		|	ТаблицаОстатков.Назначение,
		|	-(ТаблицаОстатков.КоличествоРасход - ТаблицаОстатков.КоличествоПриход)
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Обороты(
		|			&ДатаКонтроляПередЗаписьюНачало,
		|			&ДатаКонтроляПередЗаписьюКонец,
		|			,
		|			(Организация, Подразделение, Номенклатура, Характеристика, Распоряжение, КодСтроки, Назначение) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Распоряжение,
		|					Таблица.КодСтроки,
		|					Таблица.Назначение
		|				ИЗ
		|					РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату КАК Таблица)
		|					И &ДатаКонтроляПередЗаписьюНачало <> ДатаВремя(1,1,1)) КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.КоличествоРасход > ТаблицаОстатков.КоличествоПриход
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	ТаблицаОстатков.Организация,
		|	ТаблицаОстатков.Подразделение,
		|	ТаблицаОстатков.Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика,
		|	ТаблицаОстатков.Распоряжение,
		|	ТаблицаОстатков.КодСтроки,
		|	ТаблицаОстатков.Назначение,
		|	-(ТаблицаОстатков.КоличествоРасход - ТаблицаОстатков.КоличествоПриход)
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Обороты(
		|			&ДатаКонтроляПриЗаписиНачало,
		|			&ДатаКонтроляПриЗаписиКонец,
		|			,
		|			(Организация, Подразделение, Номенклатура, Характеристика, Распоряжение, КодСтроки, Назначение) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Распоряжение,
		|					Таблица.КодСтроки,
		|					Таблица.Назначение
		|				ИЗ
		|					РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату КАК Таблица)
		|					И &ДатаКонтроляПриЗаписиНачало <> ДатаВремя(1,1,1)) КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.КоличествоРасход > ТаблицаОстатков.КоличествоПриход
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
		ЗапросДаты = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Т.ДатаКонтроляПередЗаписью) КАК ДатаКонтроляПередЗаписью,
			|МИНИМУМ(Т.ДатаКонтроляПриЗаписи) КАК ДатаКонтроляПриЗаписи ИЗ ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение КАК Т");
			
		ЗапросДаты.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
		ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
		
		ДатаКонтроляПередЗаписьюНачало = Дата("00010101");
		ДатаКонтроляПередЗаписьюКонец = Дата("00010101");
		
		ДатаКонтроляПриЗаписиНачало = Дата("00010101");
		ДатаКонтроляПриЗаписиКонец = Дата("00010101");
		
		Если ВыборкаДаты.Следующий() Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДаты.ДатаКонтроляПередЗаписью) Тогда
				ДатаКонтроляПередЗаписьюНачало = НачалоМесяца(ВыборкаДаты.ДатаКонтроляПередЗаписью);
				ДатаКонтроляПередЗаписьюКонец = КонецМесяца(ВыборкаДаты.ДатаКонтроляПередЗаписью);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДаты.ДатаКонтроляПриЗаписи) Тогда
				ДатаКонтроляПриЗаписиНачало = НачалоМесяца(ВыборкаДаты.ДатаКонтроляПриЗаписи);
				ДатаКонтроляПриЗаписиКонец = КонецМесяца(ВыборкаДаты.ДатаКонтроляПриЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетЗапросов.УстановитьПараметр("ДатаКонтроляПередЗаписьюНачало",  ДатаКонтроляПередЗаписьюНачало);
		ПакетЗапросов.УстановитьПараметр("ДатаКонтроляПередЗаписьюКонец",   ДатаКонтроляПередЗаписьюКонец);
		
		ПакетЗапросов.УстановитьПараметр("ДатаКонтроляПриЗаписиНачало",     ДатаКонтроляПриЗаписиНачало);
		ПакетЗапросов.УстановитьПараметр("ДатаКонтроляПриЗаписиКонец",      ДатаКонтроляПриЗаписиКонец);
		
	КонецЕсли;
	
	//-- НЕ УТ
	
	// Контроль отрицательных остатков ПринятаяВозвратнаяТара.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПринятаяВозвратнаяТараИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ПринятаяВозвратнаяТара"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Партнер                        КАК Партнер,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.ДокументПоступления            КАК ДокументПоступления,
		|	ТаблицаОстатков.ПредусмотренЗалог              КАК ПредусмотренЗалог,
		|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
		|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(,
		|			(Партнер, Номенклатура, Характеристика, ДокументПоступления, ПредусмотренЗалог) В
		|				(ВЫБРАТЬ
		|					Таблица.Партнер,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ДокументПоступления,
		|					Таблица.ПредусмотренЗалог
		|				ИЗ
		|					ДвиженияПринятаяВозвратнаяТараИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ПереданнаяВозвратнаяТара.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПереданнаяВозвратнаяТараИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ПереданнаяВозвратнаяТара"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Партнер                        КАК Партнер,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.ДокументПередачи               КАК ДокументПередачи,
		|	ТаблицаОстатков.ПредусмотренЗалог              КАК ПредусмотренЗалог,
		|	ТаблицаОстатков.ВидЗапасов                     КАК ВидЗапасов,
		|	ТаблицаОстатков.НомерГТД                       КАК НомерГТД,
		|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
		|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(,
		|			(Партнер, Номенклатура, Характеристика, ДокументПередачи, ВидЗапасов, НомерГТД, ПредусмотренЗалог) В
		|				(ВЫБРАТЬ
		|					Таблица.Партнер,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ДокументПередачи,
		|					Таблица.ВидЗапасов,
		|					Таблица.НомерГТД,
		|					Таблица.ПредусмотренЗалог
		|				ИЗ
		|					ДвиженияПереданнаяВозвратнаяТараИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ПрочиеРасходы.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияПрочиеРасходыИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ПрочиеРасходы"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация,
		|	ТаблицаОстатков.Подразделение,
		|	ТаблицаОстатков.СтатьяРасходов,
		|	ТаблицаОстатков.АналитикаРасходов,
		|	ТаблицаОстатков.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(,
		|			(Организация, Подразделение, СтатьяРасходов, АналитикаРасходов) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.СтатьяРасходов,
		|					Таблица.АналитикаРасходов
		|				ИЗ
		|					ДвиженияПрочиеРасходыИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	//++ НЕ УТ
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияЗаказыМатериаловСУчетомКорректировокИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ЗаказыМатериаловСУчетомКорректировок"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОбороты.Организация                КАК Организация,
		|	ТаблицаОбороты.Подразделение              КАК Подразделение,
		|	ТаблицаОбороты.Распоряжение               КАК Распоряжение,
		|	ТаблицаОбороты.КодСтрокиРаспоряжения      КАК КодСтрокиРаспоряжения,
		|	ТаблицаОбороты.ВариантОбеспечения         КАК ВариантОбеспечения,
		|	ТаблицаОбороты.ДатаПотребности            КАК ДатаПотребности,
		|	ТаблицаОбороты.КодСтроки                  КАК КодСтроки,
		|	ТаблицаОбороты.Отменено                   КАК Отменено,
		|	ТаблицаОбороты.ПроизводствоНаСтороне      КАК ПроизводствоНаСтороне,
		|	ТаблицаОбороты.Серия                      КАК Серия,
		|	ТаблицаОбороты.Склад                      КАК Склад,
		|	ВЫБОР
		|		КОГДА ТаблицаОбороты.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТаблицаОбороты.Упаковка.Представление                 
		|		ИНАЧЕ ТаблицаОбороты.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление,
		|	ТаблицаОбороты.Номенклатура.Представление    КАК НоменклатураПредставление,
		|	ТаблицаОбороты.Характеристика.Представление  КАК ХарактеристикаПредставление,
		|	ТаблицаОбороты.КоличествоУпаковокОборот   КАК КоличествоУпаковок
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(,,, 
		|				(Организация,Подразделение,Распоряжение,КодСтрокиРаспоряжения) В 
		|					(ВЫБРАТЬ
		|						Таблица.Организация,
		|						Таблица.Подразделение,
		|						Таблица.Распоряжение,
		|						Таблица.КодСтрокиРаспоряжения
		|					ИЗ
		|						ЗаказыМатериаловСУчетомКорректировокИзменение КАК Таблица)
		|				)КАК ТаблицаОбороты
		|
		|ГДЕ
		|	ТаблицаОбороты.КоличествоУпаковокОборот < 0;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	//-- НЕ УТ
	
	
	// Контроль отрицательных остатков ТоварыКОформлениюЗаявленийОВвозе.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ТоварыКОформлениюЗаявленийОВвозеИзменение") Тогда
		МассивКонтролей.Добавить(Врег("ТоварыКОформлениюЗаявленийОВвозе"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументПоступления           КАК ДокументПоступления,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.Серия                         КАК Серия,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Склад                         КАК Склад,
		|	ТаблицаОстатков.КОформлениюОстаток            КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(
		|			,
		|			(ДокументПоступления, Номенклатура, Характеристика, Серия, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументПоступления,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия,
		|					Таблица.Склад
		|				ИЗ
		|					ТоварыКОформлениюЗаявленийОВвозеИзменение КАК Таблица)) КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0
		|		
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	ЗапасыСервер.ДобавитьКонтрольПоТоварамОрганизаций(Объект, ПакетЗапросов, ТекстЗапроса, МассивКонтролей, ДанныеТаблиц);
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();

	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ОбеспечениеВременнаяТаблица1") Тогда

		ИначеЕсли ИмяКонтроля = Врег("ОбеспечениеВременнаяТаблица2") Тогда

		ИначеЕсли ИмяКонтроля = Врег("Обеспечение") Тогда

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоровИзменениеСуммыДолга") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоровИзменениеКонтрольСрока") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоровПредварительные") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоров") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаОбъектыРасчетов") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ДенежныеДокументы") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеДокументы(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль") Или
			ИмяКонтроля = Врег("РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату") Тогда
			
			// временная таблица
			
		ИначеЕсли ИмяКонтроля = Врег("ДвиженияЗаказыКлиентовИзменениеМерныеТовары")
			ИЛИ ИмяКонтроля = Врег("ВТДопустимыеОтклоненияЗаказыКлиентов")
			ИЛИ ИмяКонтроля = Врег("ВТЗаказыКлиентовОстатки") Тогда
			
			// временная таблица
			
		ИначеЕсли ИмяКонтроля = Врег("ВТ_ОстатокКОформлениюПоЗаявкам")
			Или ИмяКонтроля = Врег("ВТ_ОтборАналитикУчетаНоменклатуры")
			Или ИмяКонтроля = Врег("ВТ_ОстатокПоТоварамОрганизаций") Тогда

			// временная таблица
		
		ИначеЕсли ИмяКонтроля = Врег("ВТМногооборотнаяТара") Тогда
			
			// временная таблица
			
		ИначеЕсли ИмяКонтроля = Врег("ВТЯчейкиКонтролироватьОбособление") Тогда
			
			// временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ТоварыНаСкладах") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаОстатковСТоварнымиМестами")
			Или ИмяКонтроля = Врег("ВременнаяТаблицаОборотовСТоварнымиМестами")
			Или ИмяКонтроля = Врег("ВременнаяТаблицаОстатков")
			Или ИмяКонтроля = Врег("ВременнаяТаблицаОборотов")
			Или ИмяКонтроля = Врег("ТоварныеМестаНоменклатуры") Тогда

			// временная таблица

		Иначе

			ВызватьИсключение НСтр("ru = 'Ошибка контроля проведения!'");

		КонецЕсли;
	КонецЦикла;

	ПроведениеСерверЛокализация.ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ);
	
	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено %ПредставлениеОбъекта%'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена %ПредставлениеОбъекта%'");
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта%", Строка(Объект));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);

	КонецЕсли;

КонецПроцедуры

// Функция вызывается из модулей наборов записей для проверки необходимости
//  контроля изменений движений в регистре.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей	 - Структура - дополнительные свойства набора записей.
// 
// Возвращаемое значение:
//  Булево, Истина - признак необходимости выполнения контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат Не ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) 
		И ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Функция вызывается из модулей наборов записей для проверки необходимости
//  контроля изменений движений в регистрах "Свободные остатки" и "Движение товаров".
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей	 - Структура - дополнительные свойства набора.
// 
// Возвращаемое значение:
//  Булево, Истина - признак необходимости выполнения контроля изменений движений в регистре
//  "Свободные остатки" и "Движение товаров".
//
Функция КонтролироватьОбеспечение(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем КонтролироватьОбеспечение;

	Возврат Не ДополнительныеСвойстваНабораЗаписей.Свойство("КонтролироватьОбеспечение", КонтролироватьОбеспечение)
		Или КонтролироватьОбеспечение;

КонецФункции

// Заполняет значение режима проведения документа.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект			 - экземпляр объекта определенного документа.
//  РежимЗаписи		 - РежимЗаписиДокумента		 - значение режима, в котором осуществляется запись документа.
//  РежимПроведения	 - РежимПроведенияДокумента	 - значение режима, в котором осуществляется проведение документа.
//
Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт

	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к проведению документа.
//  1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
//  2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
//  3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
//  4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
//  Вызывается из модуля документа при проведении.
//
// Параметры:
//  Объект					 - ДокументОбъект - документ-объект, для которого происходит подготовка
//  ВыборочноОчищатьРегистры - Булево - признак выборочной очистки регистров.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивИменРегистровПринудительнойОчистки.Добавить("РасходыПриУСН");
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = ПолучитьИспользуемыеРегистры(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЧерезОперацииМеханизмов

// Выполняет подготовку итоговых запросов отражения документа по учетным регистрам механизма на основании 
// 	- шаблонов отражения операций в регистрах
//  - запросов получения данных документа.
// Дополняет запрос отражения документа итоговыми текстами запросов отражения в регистрах. 
// 
// Параметры:
// 	Запрос	- Запрос - Запрос отражения документа. В него устанавливаются параметры.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	ТекстыШаблоновОтражения - Структура - Тексты шаблонов запросов отражения в учетных регистрах.
//	                            * Ключ - Строка - Имя регистра.
//	                            * Значение - Строка - Текст шаблона запроса.
//	ТекстыЗапросовДанныхДокумента - Структура - Тексты запросов выборки данных из документов.
//	                            * Ключ - Строка - Имя таблицы, необходимой для отражения.
//	                            * Значение - Строка - Текст запроса выборки данных.
//	ТекстыШаблоновВременныхТаблиц - Структура - Тексты запросов инициализации дополнительных временных таблиц для отражения.
//	                            * Ключ - Строка - Имя временной таблицы.
//	                            * Значение - Строка - Текст запроса инициализации дополнительной временной таблицы.
//	
Процедура ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВременныхТаблиц = Неопределено) Экспорт
	
	Если ТекстыШаблоновОтражения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВременныеТаблицы = Новый Массив();
	
	// Проверим и подготовим запросы выборки данных из документов.
	Для каждого КлючИЗначение Из ТекстыЗапросовДанныхДокумента Цикл
		
		Если СтрНайти("//", КлючИЗначение.Значение) <> 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать комментариев'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("СГРУППИРОВАТЬ", КлючИЗначение.Значение) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию СГРУППИРОВАТЬ'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("РАЗЛИЧНЫЕ", КлючИЗначение.Значение) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию РАЗЛИЧНЫЕ'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("УПОРЯДОЧИТЬ", КлючИЗначение.Значение) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию УПОРЯДОЧИТЬ'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("ОБЪЕДИНИТЬ", КлючИЗначение.Значение) <> Неопределено Тогда
			// Если запрос выборки данных содержит объединение нескольких таблиц,
			// то поместим это объединение во временную таблицу.
			ИмяВременнойТаблицы = КлючИЗначение.Ключ;
			ТекстСозданияВременнойТаблицы =
			"ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	(%2) КАК %1
			|";
			ТекстСозданияВременнойТаблицы = СтрШаблон(ТекстСозданияВременнойТаблицы, ИмяВременнойТаблицы, КлючИЗначение.Значение);
			ТекстыЗапроса.Добавить(ТекстСозданияВременнойТаблицы, ИмяВременнойТаблицы, Истина);
			ВременныеТаблицы.Добавить(ИмяВременнойТаблицы);
			ТекстыЗапросовДанныхДокумента[КлючИЗначение.Ключ] = "";
		Иначе
			ТекстыЗапросовДанныхДокумента[КлючИЗначение.Ключ] = РазобратьТекстЗапроса(КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим тексты запросов дополнительных временных таблицы.
	Если ТекстыШаблоновВременныхТаблиц <> Неопределено Тогда
		Для каждого КлючИЗначение Из ТекстыШаблоновВременныхТаблиц Цикл
			ИмяВременнойТаблицы = КлючИЗначение.Ключ;
			ТекстЗапроса = КлючИЗначение.Значение;
			ПодготовитьТекстЗапросаОтраженияДокумента(ТекстЗапроса, ТекстыЗапросовДанныхДокумента);
			ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовим тексты запросов отражения операций в регистрах.
	Для каждого КлючИЗначение Из ТекстыШаблоновОтражения Цикл
		ИмяРегистра = КлючИЗначение.Ключ;
		ТекстОтражения = КлючИЗначение.Значение;
		ПодготовитьТекстЗапросаОтраженияДокумента(ТекстОтражения, ТекстыЗапросовДанныхДокумента);
		ТекстыЗапроса.Добавить(ТекстОтражения, ИмяРегистра);
	КонецЦикла;
	
	// Удалим созданные для отражения временные таблицы.
	Для каждого ИмяВременнойТаблицы Из ВременныеТаблицы Цикл
		ТекстУдаления = СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы);
		ТекстыЗапроса.Добавить(ТекстУдаления, ИмяВременнойТаблицы, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет сборку запроса отражения конкретного документа по операции механизма.
// 
// Параметры:
// 	ТекстШаблонаОтражения - Строка - Текст запроса отражения операции.
// 	ТекстыЗапросовДанныхДокумента - Структура - Структура текстов запросов выборки данных документа.
// 	          * Ключ - Строка - Имя таблицы, необходимой для отражения.
// 	          * Значение - Строка, Структура - Текст запроса выборки данных из документа.
// 	                  Значение может быть как неразобранный текст запроса (значение типа Строка) или
// 	                  текст запроса разобранный в структуру с помощью ПроведениеСерверУТ.РазобратьТекстЗапроса().
//
Процедура ПодготовитьТекстЗапросаОтраженияДокумента(ТекстШаблонаОтражения, ТекстыЗапросовДанныхДокумента) Экспорт
	
	Для каждого ТекстЗапросаДокумента Из ТекстыЗапросовДанныхДокумента Цикл
		
		ИмяТаблицыДанных = ТекстЗапросаДокумента.Ключ;
		ТекстЗапросаДанных = ТекстЗапросаДокумента.Значение;
		
		Если Не ЗначениеЗаполнено(ТекстЗапросаДанных) Тогда
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(ТекстШаблонаОтражения, ИмяТаблицыДанных);
		Иначе
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзДокумента(ТекстШаблонаОтражения, ИмяТаблицыДанных, ТекстЗапросаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует временную таблицу ВтСуммыДокументовВВалютахУчета с построчными суммами документа, пересчитанными в валюты регл. и упр. учета.
// Если выполнено отражение по взаиморасчетам и актуализация регистра СуммыДокументовВВалютеРегл, 
// то суммы в валютах регл. и упр. учета возвращаются с учетом курсов зачтенных предоплат.
// Иначе суммы рассчитываются по курсу на дату документа.
// 
// Формируемая временная таблица имеет следующие колонки:
// 		* Ссылка - ДокументСсылка - Ссылка на документ.  
// 		* Дата - Дата - Дата документа.
// 		* ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 		* ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов по документу.
// 		* ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа.
// 		* СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС по строке документа.
// 		* СуммаСНДС - Число - Сумма с НДС в валюте документа.
// 		* СуммаНДС - Число - Сумма НДС в валюте документа.
// 		* СуммаБезНДС - Число - Сумма НДС в валюте документа.
// 		* СуммаВзаиморасчетов - Число - Сумма в валюте взаиморасчетов.
// 		* СуммаНДСВзаиморасчетов - Число - Сумам НДС в валюте взаиморасчетов.
// 		* СуммаСНДСУпр - Число - Сумма с НДС в валюте упр. учета.
// 		* СуммаБезНДСУпр - Число - Сумма без НДС в валюте упр. учета.
// 		* СуммаНДСУпр - Число - Сумма НДС в валюте упр. учета.
// 		* СуммаСНДСРегл - Число - Сумма с НДС в валюте регл. учета.
// 		* СуммаБезНДСРегл - Число - Сумма без НДС в валюте регл. учета.
// 		* БазаНДСРегл - Число - Налоговая база в валюте регл. учета.
// 		* СуммаНДСРегл - Число - Сумма НДС в валюте регл. учета.
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц запроса проведения.
// 	ТекстЗапросаДанныхДокументов - Строка - Текст выборки данных документа.
// 		В тексте запроса должны выбираться поля
// 			* Ссылка - ДокументСсылка - Ссылка на документ.  
// 			* Дата - Дата - Дата документа.
// 			* ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
// 			* ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов по документу.
// 			* ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа.
// 			* СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС по строке документа.
// 			* СуммаСНДС - Число - Сумма с НДС по строке в валюте документа.
// 			* СуммаНДС - Число - Сумма НДС по строке в валюте документа.
// 			* СуммаБезНДС - Число - Сумма НДС по строке в валюте документа.
// 			* СуммаВзаиморасчетов - Число - Сумма в валюте взаиморасчетов.
// 			* СуммаНДСВзаиморасчетов - Число - Сумам НДС в валюте взаиморасчетов.
//
Процедура ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса, ТекстЗапросаДанныхДокументов) Экспорт
	
	Если ЕстьТаблицаЗапроса("ВтСуммыДокументовВВалютахУчета", ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВтСуммыДокументовВВалютахУчета") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.ВалютаДокумента                       КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ДанныеДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаСНДС                             КАК СуммаСНДС,
	|	ДанныеДокумента.СуммаНДС                              КАК СуммаНДС,
	|	ДанныеДокумента.СуммаБезНДС                           КАК СуммаБезНДС,
	|	ДанныеДокумента.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаНДСВзаиморасчетов                КАК СуммаНДСВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ДанныеДокументаПредварительная
	|ИЗ
	|(&ТекстЗапросаДанныхДокументов) КАК ДанныеДокумента
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДанныхДокументов", ТекстЗапросаДанныхДокументов);
	ЗапросИнициализации = Новый Запрос;
	ЗапросИнициализации.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросИнициализации.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	ЗапросИнициализации.УстановитьПараметр("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
	Для каждого Параметр Из Запрос.Параметры Цикл
		ЗапросИнициализации.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ЗапросИнициализации.Текст = ТекстЗапроса;
	ЗапросИнициализации.Выполнить();
	
	ВалютыДляПересчета = Новый Структура;
	ВалютыДляПересчета.Вставить("Регл", ВалютаРегламентированногоУчета);
	ВалютыДляПересчета.Вставить("Упр",  ВалютаУправленческогоУчета);
	ОбщегоНазначенияУТ.ПересчитатьТаблицуТоваровВВалюты(
		ЗапросИнициализации.МенеджерВременныхТаблиц, ВалютыДляПересчета, "ДанныеДокументаПредварительная");
	
	ЗапросИнициализации.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка                                КАК Ссылка,
	|	ДанныеДокументов.Дата                                  КАК Дата,
	|	ДанныеДокументов.Валюта                                КАК ВалютаДокумента,
	|	ДанныеДокументов.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
	|	ДанныеДокументов.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ДанныеДокументов.СтавкаНДС                             КАК СтавкаНДС,
	|	ДанныеДокументов.СуммаСНДС                             КАК СуммаСНДС,
	|	ДанныеДокументов.СуммаНДС                              КАК СуммаНДС,
	|	ДанныеДокументов.СуммаБезНДС                           КАК СуммаБезНДС,
	|	ДанныеДокументов.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
	|	ДанныеДокументов.СуммаНДСВзаиморасчетов                КАК СуммаНДСВзаиморасчетов,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета 
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСУпр + ДанныеДокументов.СуммаНДСУпр
	|		КОНЕЦ) КАК СуммаСНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|		ВЫБОР 
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСУпр
	|		КОНЕЦ) КАК СуммаБезНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСУпр,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета 
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаНДСУпр
	|		КОНЕЦ) КАК СуммаНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСРегл 
	|		КОНЕЦ 
	|	) КАК СуммаБезНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета 
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаНДСРегл
	|		КОНЕЦ
	|	) КАК СуммаНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСРегл + ДанныеДокументов.СуммаНДСРегл
	|		КОНЕЦ
	|	) КАК СуммаСНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.БазаНДСРегл,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|			ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСРегл
	|		КОНЕЦ 
	|	) КАК БазаНДСРегл
	|
	|ПОМЕСТИТЬ ВтСуммыДокументовВВалютахУчета
	|ИЗ
	|	ДанныеДокументаПредварительная КАК ДанныеДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		ДанныеДокументов.Ссылка = Суммы.Регистратор
	|		И ДанныеДокументов.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И ДанныеДокументов.ВалютаВзаиморасчетов = Суммы.ВалютаВзаиморасчетов
	|		И ДанныеДокументов.Валюта = Суммы.Валюта
	|		И ДанныеДокументов.СуммаВзаиморасчетов = Суммы.СуммаВзаиморасчетов
	|		И ДанныеДокументов.СуммаБезНДС = Суммы.СуммаБезНДС
	|		И ДанныеДокументов.СуммаНДС = Суммы.СуммаНДС
	|;
	|
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокументаПредварительная
	|";
	
	ЗапросИнициализации.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие изменений в таблице регистра.
//
Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ) Экспорт

	Перем ЕстьИзменения;
	
	Если СтруктураДанных.Свойство(Ключ, ЕстьИзменения) Тогда
		
		Если ТипЗнч(ЕстьИзменения) = Тип("Булево") Тогда
			Возврат ЕстьИзменения;
		Иначе
			Возврат ЕстьИзменения.ЕстьЗаписиВТаблице;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ТекстЗапросаКонтрольОбеспечения(ЕстьИзмененияСвободныеОстатки, ЕстьИзмененияГрафикОтгрузкиТоваров)

	Если ЕстьИзмененияСвободныеОстатки И ЕстьИзмененияГрафикОтгрузкиТоваров Тогда

		ТекстТаблицыТоваров =
			"ВЫБРАТЬ
			|	Т.Номенклатура               КАК Номенклатура,
			|	Т.Характеристика             КАК Характеристика,
			|	Т.Склад                      КАК Склад,
			|	ДАТАВРЕМЯ(1, 1, 1)           КАК Период
			|ПОМЕСТИТЬ ВтТоварыДляКонтроляОбеспечения
			|ИЗ
			|	ДвиженияСвободныеОстаткиИзменение КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Склад          КАК Склад,
			|	Т.Период         КАК Период
			|ИЗ
			|	ДвиженияГрафикОтгрузкиТоваровИзменение КАК Т
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад
			|;
			|
			|/////////////////////////////////////////////
			|";

	ИначеЕсли ЕстьИзмененияСвободныеОстатки Тогда

		ТекстТаблицыТоваров =
			"ВЫБРАТЬ
			|	Т.Номенклатура               КАК Номенклатура,
			|	Т.Характеристика             КАК Характеристика,
			|	Т.Склад                      КАК Склад,
			|	ДАТАВРЕМЯ(1, 1, 1)           КАК Период
			|ПОМЕСТИТЬ ВтТоварыДляКонтроляОбеспечения
			|ИЗ
			|	ДвиженияСвободныеОстаткиИзменение КАК Т
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад
			|;
			|
			|/////////////////////////////////////////////
			|";

	ИначеЕсли ЕстьИзмененияГрафикОтгрузкиТоваров Тогда

		ТекстТаблицыТоваров =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Склад          КАК Склад,
			|	Т.Период         КАК Период
			|ПОМЕСТИТЬ ВтТоварыДляКонтроляОбеспечения
			|ИЗ
			|	ДвиженияГрафикОтгрузкиТоваровИзменение КАК Т
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад
			|;
			|
			|/////////////////////////////////////////////
			|";

	КонецЕсли;

	ТекстЗапроса = ТекстТаблицыТоваров
		+"ВЫБРАТЬ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	Т.Период         КАК Период,
		|	МАКСИМУМ(ОстаткиИзЗаказов.ДатаДоступности) КАК Дата
		|
		|ПОМЕСТИТЬ ВтТоварыКонтроляГрафика
		|ИЗ
		|	ВтТоварыДляКонтроляОбеспечения КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
		|			ПО Т.Номенклатура   = ОстаткиИзЗаказов.Номенклатура
		|			 И Т.Характеристика = ОстаткиИзЗаказов.Характеристика
		|			 И Т.Склад          = ОстаткиИзЗаказов.Склад
		|			 И Т.Период >= ОстаткиИзЗаказов.ДатаДоступности
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад,
		|	Т.Период
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ОстаткиИзЗаказов.ДатаДоступности) ЕСТЬ NULL
		|;
		|
		|/////////////////////////////////////////////
		|";

	ТекстЗапроса = ТекстЗапроса
		+"ВЫБРАТЬ
		|	Набор.Номенклатура        КАК Номенклатура,
		|	Набор.Характеристика      КАК Характеристика,
		|	Набор.Склад               КАК Склад,
		|	Набор.Период              КАК Период,
		|	МАКСИМУМ(Набор.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|
		|	СУММА(Набор.ВНаличии)          КАК ВНаличии,
		|	СУММА(Набор.ВРезервеИзЗаказов) КАК ВРезервеИзЗаказов,
		|	СУММА(Набор.ВРезервеСоСклада)  КАК ВРезервеСоСклада,
		|	СУММА(Набор.ВРезервеПодЗаказ)  КАК ВРезервеПодЗаказ
		|
		|ИЗ(
		|	ВЫБРАТЬ
		|		Т.Номенклатура        КАК Номенклатура,
		|		Т.Характеристика      КАК Характеристика,
		|		Т.Склад               КАК Склад,
		|		Т.Период              КАК Период,
		|		СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|
		|		ОстаткиСклада.ВНаличииОстаток            КАК ВНаличии,
		|		0                                        КАК ВРезервеИзЗаказов,
		|		ОстаткиСклада.ВРезервеСоСкладаОстаток    КАК ВРезервеСоСклада,
		|		ОстаткиСклада.ВРезервеПодЗаказОстаток    КАК ВРезервеПодЗаказ
		|	ИЗ
		|		ВтТоварыДляКонтроляОбеспечения КАК Т
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,
		|				(Номенклатура, Характеристика, Склад) В(
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Т.Номенклатура        КАК Номенклатура,
		|						Т.Характеристика      КАК Характеристика,
		|						Т.Склад               КАК Склад
		|					ИЗ
		|						ВтТоварыДляКонтроляОбеспечения КАК Т)) КАК ОстаткиСклада
		|			ПО Т.Номенклатура   = ОстаткиСклада.Номенклатура
		|			 И Т.Характеристика = ОстаткиСклада.Характеристика
		|			 И Т.Склад          = ОстаткиСклада.Склад
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ПО Т.Номенклатура = СпрНоменклатура.Ссылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ
		|			Т.Номенклатура   КАК Номенклатура,
		|			Т.Характеристика КАК Характеристика,
		|			Т.Склад          КАК Склад,
		|			Т.Период         КАК Период,
		|			СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|
		|			0                                  КАК ВНаличии,
		|			- ОстаткиИзЗаказов.Количество      КАК ВРезервеИзЗаказов,
		|			0                                  КАК ВРезервеСоСклада,
		|			0                                  КАК ВРезервеПодЗаказ
		|		ИЗ
		|			ВтТоварыКонтроляГрафика КАК Т
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
		|				ПО Т.Номенклатура   = ОстаткиИзЗаказов.Номенклатура
		|				 И Т.Характеристика = ОстаткиИзЗаказов.Характеристика
		|				 И Т.Склад          = ОстаткиИзЗаказов.Склад
		|				 И Т.Дата           = ОстаткиИзЗаказов.ДатаДоступности
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|				ПО Т.Номенклатура = СпрНоменклатура.Ссылка) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад,
		|	Набор.Период
		|
		|ИМЕЮЩИЕ
		|	Набор.Период = ДАТАВРЕМЯ(1, 1, 1) И(
		|		СУММА(Набор.ВНаличии) < 0
		|		ИЛИ СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеПодЗаказ) < 0
		|		ИЛИ СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеПодЗаказ) - СУММА(Набор.ВРезервеСоСклада) < 0)
		|
		|	ИЛИ СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеПодЗаказ) - СУММА(Набор.ВРезервеСоСклада) - СУММА(Набор.ВРезервеИзЗаказов) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|///////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ОтключитьПроверкуДатыЗапретаИзменения(Движения, ОтключитьПроверкуДатыЗапретаИзменения) Экспорт
	
	Для Каждого НаборЗаписей Из Движения Цикл
		
		Если ОтключитьПроверкуДатыЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыВыдачиСообщенийОбОшибкахПроведения

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Назначение%
		|Превышен оперативный складской остаток на складе ""%Склад%"" на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",
									СкладыСервер.ПолучитьПредставлениеСклада(Выборка.Склад, Выборка.Помещение));		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		Назначение = ?(ЗначениеЗаполнено(Выборка.Назначение), "(" + Строка(Выборка.Назначение) + ")", "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Назначение);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеДокументы(Объект, Отказ, РезультатЗапроса)
	
	ШаблонКоличество = НСтр("ru = 'Денежный документ %1
		|Превышен остаток в наличии по организации %2 в подразделении %3 у МОЛ %4 на %5 шт.'");
	ШаблонСумма = НСтр("ru = 'Денежный документ %1
		|Превышен остаток в наличии по организации %2 в подразделении %3 у МОЛ %4 на %6 %7'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ШаблонСообщения = ?(Выборка.Количество < 0, ШаблонКоличество, ШаблонСумма);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Выборка.ДенежныйДокумент, // %1
			Выборка.Организация,      // %2
			Выборка.Подразделение,    // %3
			Выборка.МОЛ,              // %4
			-Выборка.Количество,      // %5
			-Выборка.Сумма,           // %6
			Выборка.Валюта);          // %7
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЧерезОперацииМеханизмов

Процедура ВыполнитьЗаменуПоПолномуСоответствию(Текст, СтрокаПоиска, СтрокаЗамены) Экспорт
	
	Если СтрокаПоиска = СтрокаЗамены Тогда
		Возврат;
	КонецЕсли; 
	
	ДлинаТекста = СтрДлина(Текст);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	ПозицияСтрокиПоиска = 1;
	НачальнаяПозицияПоиска = 1;
	
	ВыполненныеЗамены = Новый Соответствие;
	
	Пока ПозицияСтрокиПоиска <> 0 Цикл
		
		ПозицияСтрокиПоиска = СтрНайти(Текст, СтрокаПоиска, , НачальнаяПозицияПоиска);
		Если ПозицияСтрокиПоиска = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнятьЗамену = Истина;
		
		ПредыдущийСимвол = "";
		Если ПозицияСтрокиПоиска > 1 Тогда
			ПредыдущийСимвол = Сред(Текст, ПозицияСтрокиПоиска -1 , 1);
			Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
				ВыполнятьЗамену = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			СледующийСимвол = "";
			Если ПозицияСтрокиПоиска < ДлинаТекста Тогда
				СледующийСимвол = Сред(Текст, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска, 1);
				Если Не СлужебныйСимвол(СледующийСимвол) Тогда
					ВыполнятьЗамену = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			ПолнаяСтрокаПоиска = СтрШаблон("%1%2%3", ПредыдущийСимвол,СтрокаПоиска, СледующийСимвол);
			Если ВыполненныеЗамены[ПолнаяСтрокаПоиска] = Неопределено Тогда
				ПолнаяСтрокаЗамены = СтрШаблон("%1%2%3", ПредыдущийСимвол,СтрокаЗамены, СледующийСимвол);
				Текст = СтрЗаменить(Текст, ПолнаяСтрокаПоиска, ПолнаяСтрокаЗамены);
				ДлинаТекста = СтрДлина(Текст);
				ВыполненныеЗамены.Вставить(ПолнаяСтрокаПоиска, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		НачальнаяПозицияПоиска = ПозицияСтрокиПоиска + СтрДлина(ПолнаяСтрокаЗамены) + 1;
		
		Если НачальнаяПозицияПоиска >= ДлинаТекста Тогда
			ПозицияСтрокиПоиска = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьТекстЗапроса(Знач ТекстЗапроса) Экспорт
	
	Результат = Новый Структура;
	
	ПозицияВЫБРАТЬ = ПозицияКлючевогоСлова("ВЫБРАТЬ", ТекстЗапроса);
	ПозицияИЗ      = ПозицияКлючевогоСлова("ИЗ", ТекстЗапроса);
	ПозицияГДЕ     = ПозицияКлючевогоСлова("ГДЕ", ТекстЗапроса);
	
	СимволовВыборки = ПозицияИЗ.НачальнаяПозиция - ПозицияВЫБРАТЬ.КонечнаяПозиция;
	ТекстВыборки = Сред(ТекстЗапроса, ПозицияВЫБРАТЬ.КонечнаяПозиция, СимволовВыборки); 
	СтруктураПолейВыборки = СтруктураПолейВыборки(ТекстВыборки);
	
	Если ПозицияГДЕ = Неопределено Тогда
		
		СимволовТаблицы = СтрДлина(ТекстЗапроса) - ПозицияИЗ.КонечнаяПозиция;
		ТекстТаблицы = СокрЛП(Прав(ТекстЗапроса, СимволовТаблицы));
		ТекстОтбор = "";
		
	Иначе
		
		СимволовТаблицы = ПозицияГДЕ.НачальнаяПозиция - ПозицияИЗ.КонечнаяПозиция;
		ТекстТаблицы = СокрЛП(Сред(ТекстЗапроса, ПозицияИЗ.КонечнаяПозиция, СимволовТаблицы));
		
		СимволовОтбор =  СтрДлина(ТекстЗапроса) - ПозицияГДЕ.КонечнаяПозиция;
		ТекстОтбор = СокрЛП(Прав(ТекстЗапроса, СимволовОтбор));
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПоляВыборки", СтруктураПолейВыборки);
	Результат.Вставить("Таблицы",     ТекстТаблицы);
	Результат.Вставить("Отбор",       ТекстОтбор);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(Знач ТекстШаблонОтражения, Знач ИмяТаблицыДанных) 
	
	ТекстЗапросОтражения = ТекстШаблонОтражения;
	
	ЧастиСтрокиПоиска = Новый Массив;
	ЧастиСтрокиПоиска.Добавить("#");
	ЧастиСтрокиПоиска.Добавить(ИмяТаблицыДанных);
	СтрокаПоиска = СтрСоединить(ЧастиСтрокиПоиска);
	
	ТекстЗапросОтражения = СтрЗаменить(ТекстШаблонОтражения, СтрокаПоиска, ИмяТаблицыДанных);
	
	Возврат ТекстЗапросОтражения;
	
КонецФункции

Функция ЗапросОтраженияСВыборомДанныхИзДокумента(Знач ТекстШаблонОтражения, Знач ИмяТаблицыДанных, Знач ТекстЗапросаДанных) 
	
	ТекстЗапросОтражения = ТекстШаблонОтражения;
	
	Если СтрНайти(ТекстЗапросОтражения, "#" + ИмяТаблицыДанных, НаправлениеПоиска.СКонца) = 0 Тогда
		// В запросе не требуется выборка из таблицы данных.
		Возврат ТекстЗапросОтражения;
	КонецЕсли;
	
	Если ТипЗнч(ТекстЗапросаДанных) = Тип("Строка") Тогда
		РезультатРазбораТекстаЗапроса = РазобратьТекстЗапроса(ТекстЗапросаДанных);
	Иначе
		РезультатРазбораТекстаЗапроса = ТекстЗапросаДанных;
	КонецЕсли;
	
	СтрокаПоиска = СтрШаблон("#%1 КАК %1", ИмяТаблицыДанных);
	СтрокаЗамены = РезультатРазбораТекстаЗапроса.Таблицы;
	ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапросОтражения, СтрокаПоиска, СтрокаЗамены);
	
	Для каждого ПолеВыборки Из РезультатРазбораТекстаЗапроса.ПоляВыборки Цикл
		СтрокаПоиска = СтрШаблон("%1.%2", ИмяТаблицыДанных, ПолеВыборки.Ключ);
		СтрокаЗамены = ПолеВыборки.Значение;
		ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапросОтражения, СтрокаПоиска, СтрокаЗамены);
	КонецЦикла;
	
	ОбъединитьОтборы(ТекстЗапросОтражения, РезультатРазбораТекстаЗапроса.Таблицы, РезультатРазбораТекстаЗапроса.Отбор);
	
	Возврат ТекстЗапросОтражения;
	
КонецФункции

Процедура ОбъединитьОтборы(ТекстЗапросОтражения, ТаблицыЗапросаДанныхДокумента, ОтборЗапросаДанныхДокумента) 
	
	Если Не ЗначениеЗаполнено(ОтборЗапросаДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	// Разберем запрос на фрагменты объединения.
	// Вставку отбора в каждый из фрагментов будем выполнять отдельно.
	МассивФрагментов = Новый Массив;
	НачальнаяПозицияФрагмента = 1;
	ПозицияОбъединить = ПозицияКлючевогоСлова("ОБЪЕДИНИТЬ", ТекстЗапросОтражения, НачальнаяПозицияФрагмента);
	Пока ПозицияОбъединить <> Неопределено Цикл
		ЧислоСимволов = ПозицияОбъединить.НачальнаяПозиция - НачальнаяПозицияФрагмента - 1;
		Фрагмент = Сред(ТекстЗапросОтражения, НачальнаяПозицияФрагмента, ЧислоСимволов);
		МассивФрагментов.Добавить(Фрагмент);
		НачальнаяПозицияФрагмента = ПозицияОбъединить.КонечнаяПозиция + 1;
		ПозицияОбъединить = ПозицияКлючевогоСлова("ОБЪЕДИНИТЬ", ТекстЗапросОтражения, НачальнаяПозицияФрагмента);
	КонецЦикла;
	ЧислоСимволов = СтрДлина(ТекстЗапросОтражения) - НачальнаяПозицияФрагмента + 1;
	ПоследнийФрагмент = Прав(ТекстЗапросОтражения, ЧислоСимволов);
	МассивФрагментов.Добавить(ПоследнийФрагмент);
	
	// Возможны два сценария вставки отбора
	// 1. Объединение с имеющимся отбором. Если отбор в запросе уже есть, то его берем в "()" и вставляем доп. отбор с "И".
	// 2. Добавление отбора. Если отбора в запросе нет, то вставляем вместе с "ГДЕ".
	// Место вставки определяем по ключевому слову, предшествующем отбору.
	// Если ключевое слово не найдено, то отбор вставляем в конец запроса.
	КлючевыеСлова = Новый Массив;
	КлючевыеСлова.Добавить("СГРУППИРОВАТЬ");
	КлючевыеСлова.Добавить("УПОРЯДОЧИТЬ");
	КлючевыеСлова.Добавить("ИТОГИ");
	
	МаксимальныйИндекс = МассивФрагментов.Количество() - 1; 
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		Если СтрНайти(МассивФрагментов[Индекс], ТаблицыЗапросаДанныхДокумента) = 0 Тогда
			// В фрагменте объединения выборка из текущей таблицы данных не выполняется.
			Продолжить;
		КонецЕсли;
		
		ПозицияГДЕ = ПозицияКлючевогоСлова("ГДЕ", МассивФрагментов[Индекс]);
		
		КлючевоеСловоПередОтбором = Неопределено;
		Для каждого КлючевоеСлово ИЗ КлючевыеСлова Цикл
			ПозицияКлючевогоСлова = ПозицияКлючевогоСлова(КлючевоеСлово, МассивФрагментов[Индекс]);
			Если ПозицияКлючевогоСлова <> Неопределено Тогда
				КлючевоеСловоПередОтбором = КлючевоеСлово;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПозицияГДЕ = Неопределено Тогда
			Если КлючевоеСловоПередОтбором = Неопределено Тогда
				ШаблонОтбора = 
				   "ГДЕ
				   |	%1";
				ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
				МассивФрагментов[Индекс] = МассивФрагментов[Индекс] + ТекстОтбор;
			Иначе
				ШаблонОтбора = 
				   "ГДЕ
				   |	%1
				   |%2";
				ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента, КлючевоеСловоПередОтбором);
				ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментов[Индекс], КлючевоеСловоПередОтбором, ТекстОтбор);
			КонецЕсли;
		Иначе
			Если КлючевоеСловоПередОтбором = Неопределено Тогда
				ШаблонОтбора = 
				   "ГДЕ
				   |	(%1) 
				   |	И (";
				ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
				ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментов[Индекс], "ГДЕ", ТекстОтбор);
				МассивФрагментов[Индекс] = МассивФрагментов[Индекс] + ")";
			Иначе
				ШаблонОтбора = 
				   "ГДЕ
				   |	(%1) 
				   |	И (";
				ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
				ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментов[Индекс], "ГДЕ", ТекстОтбор);
				ТекстЗаменыКлючевогоСлова = СтрШаблон(") %1", КлючевоеСловоПередОтбором);
				ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментов[Индекс], КлючевоеСловоПередОтбором, ТекстЗаменыКлючевогоСлова);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросОтражения = СтрСоединить(МассивФрагментов, " ОБЪЕДИНИТЬ ");
	
КонецПроцедуры

Функция СтруктураПолейВыборки(ТекстВыборки)
	
	СтруктураПолейВыборки = Новый Структура;
	ПодстрокиВыборкиДляАнализа = СтрРазделить(ТекстВыборки, ",", Ложь);
	
	// Преобразуем массив подстрок выборки разделенных "," в массив выражений выборки.
	ПодстрокиВыборки = Новый Массив;
	ТекущийМассивПодстрок = Новый Массив;
	Для каждого Подстрока Из ПодстрокиВыборкиДляАнализа Цикл
		
		ТекущийМассивПодстрок.Добавить(Подстрока);
		ТекущаяПодстрока = СтрСоединить(ТекущийМассивПодстрок, ",");
		
		ЧислоВхожденийОткрытиеСкобки = СтрЧислоВхождений(ТекущаяПодстрока, "(");
		ЧислоВхожденийЗакрытиеСкобки = СтрЧислоВхождений(ТекущаяПодстрока, ")");
		ЧислоВхожденийДвойныхКавычек = СтрЧислоВхождений(ТекущаяПодстрока, """");
		
		Если ЧислоВхожденийОткрытиеСкобки = ЧислоВхожденийЗакрытиеСкобки И ЧислоВхожденийДвойныхКавычек%2 = 0 Тогда
			ПодстрокиВыборки.Добавить(ТекущаяПодстрока);
			ТекущийМассивПодстрок.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем структуру полей выборки:
	// - Ключ - Псевдоним
	// - Значение - Выражение
	Для каждого Подстрока Из ПодстрокиВыборки Цикл
		ПозицияКАК = ПозицияКлючевогоСлова("КАК", Подстрока, , Истина);
		Если ПозицияКАК = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Для всех полей выборки должен быть задан псевдоним'");
		КонецЕсли;
		Выражение = СтрШаблон("(%1)", СокрЛП(Лев(Подстрока, ПозицияКАК.НачальнаяПозиция -1)));
		Псевдоним = СокрЛП(Прав(Подстрока, СтрДлина(Подстрока) - ПозицияКАК.КонечнаяПозиция));
		СтруктураПолейВыборки.Вставить(Псевдоним, Выражение);
	КонецЦикла;
	
	Возврат СтруктураПолейВыборки;
	
КонецФункции

Функция ПозицияКлючевогоСлова(КлючевоеСлово, Знач ТекстЗапроса, Знач НачальнаяПозицияПоиска = 1, ПоискСКонца = Ложь)
	
	Результат = Неопределено;
	
	ДлинаСлова = СтрДлина(КлючевоеСлово);
	ДлинаЗапроса = СтрДлина(ТекстЗапроса);
	
	Если ПоискСКонца Тогда
		НаправлениеПоискаСлова = НаправлениеПоиска.СКонца;
		НачальнаяПозицияПоиска = ДлинаЗапроса - НачальнаяПозицияПоиска + 1;
	Иначе
		НаправлениеПоискаСлова = НаправлениеПоиска.СНачала;
	КонецЕсли;
	
	Если НачальнаяПозицияПоиска > ДлинаЗапроса Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока НачальнаяПозицияПоиска > 0 Цикл
		
		НачальнаяПозицияСлова = СтрНайти(ТекстЗапроса, КлючевоеСлово, НаправлениеПоискаСлова, НачальнаяПозицияПоиска);
		
		Если НачальнаяПозицияСлова = 0 Тогда
			// Ключевое слово не найдено
			Прервать;
		КонецЕсли;
		
		ЭтоКлючевоеСлово = Истина;
		
		ПозицияСледующегоСимвола = НачальнаяПозицияСлова + ДлинаСлова + 1;
		Если ПозицияСледующегоСимвола < ДлинаЗапроса Тогда
			СледующийСимвол = Сред(ТекстЗапроса, НачальнаяПозицияСлова + ДлинаСлова, 1);
			Если Не СлужебныйСимвол(СледующийСимвол) Тогда
				ЭтоКлючевоеСлово = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКлючевоеСлово Тогда
			ПозицияПредыдущегоСимвола = НачальнаяПозицияСлова - 1;
			Если ПозицияПредыдущегоСимвола > 0 Тогда
				ПредыдущийСимвол = Сред(ТекстЗапроса, ПозицияПредыдущегоСимвола, 1);
				Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
					ЭтоКлючевоеСлово = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКлючевоеСлово Тогда
			// Слово найдено
			Результат = Новый Структура(
							"НачальнаяПозиция, КонечнаяПозиция", 
							НачальнаяПозицияСлова, НачальнаяПозицияСлова + ДлинаСлова);
			Прервать;
		КонецЕсли;
		
		НачальнаяПозицияПоиска = НачальнаяПозицияСлова + ДлинаСлова + 1;
		Если НачальнаяПозицияПоиска > ДлинаЗапроса Тогда
			НачальнаяПозицияПоиска = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СлужебныйСимвол(Символ)
	
	Если Символ = " "
		ИЛИ Символ = Символы.ВК
		ИЛИ Символ = Символы.ПС
		ИЛИ Символ = "."
		ИЛИ Символ = "	"
		ИЛИ Символ = ","
		ИЛИ Символ = ")"
		ИЛИ Символ = "("
		ИЛИ Символ = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
